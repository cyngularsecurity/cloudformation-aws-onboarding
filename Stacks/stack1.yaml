AWSTemplateFormatVersion: 2010-09-09
Description: Cyngular organization managment stack template

Parameters:
  ClientName:
    Description: The name of the client. (must be lowercase, can contain letters, numbers and dashes)
    Type: String
    AllowedPattern: "^[a-z0-9](?:[a-z0-9\\-\\.]*[a-z0-9])?$"
    MinLength: 3
    MaxLength: 10

  OrganizationId:
    Description: "Specify whether the client is using an Organization { '0' / 'ID' }"
    Type: String

  CyngularAccountId:
    Description: "The cyngular Account ID to assume read only role"
    Type: String
    MinLength: 12
    MaxLength: 12
    AllowedPattern: '^[0-9]{12}$'
    ConstraintDescription: "Must be exactly 12 digits."
    Default: 851565895544

  ClientRegions:
    Description: The regions in which the client operates (comma-separated for example; us-east-1,us-east-2), make sure all regions listed are enabled in the relevent accounts
    Type: CommaDelimitedList
    # AllowedValues: [me-south-1, us-east-1, us-east-2, us-west-1, us-west-2, ap-southeast-1, ap-southeast-2, ap-south-1, ap-northeast-1, ap-northeast-2, ap-northeast-3, af-south-1, eu-west-1, eu-west-2, eu-west-3, eu-central-1, eu-north-1, eu-south-1, ca-central-1, sa-east-1, il-central-1, af-north-1, ap-east-1]
    AllowedValues:
      - me-south-1
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - ap-southeast-1
      - ap-southeast-2
      - ap-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - af-south-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-north-1
      - eu-south-1
      - ca-central-1
      - sa-east-1
      - il-central-1
  
  Stack2URL:
    Description: 'The link to the stack2 template url'
    Type: String
    Default: 'https://cyngular-onboarding-templates.s3.amazonaws.com/stacks/stack2.yaml'

  StackSet1URL:
    Description: 'The link to the stackset1 template url'
    Type: String
    Default: 'https://cyngular-onboarding-templates.s3.amazonaws.com/stacks/stackset_child1.yaml'

  StackSet2URL:
    Description: 'The link to the stackset2 template url'
    Type: String
    Default: 'https://cyngular-onboarding-templates.s3.amazonaws.com/stacks/stackset_child2.yaml'

#   OUList:
#   AccountList:
#   DeployList: # check if empty, and others are not, concat

#   EnableGuardDuty:
#     Description: "GuardDuty Service - Create GuardDuty Detector"
#     Type: String
#     AllowedValues: ["true", "false"]
#     Default: "true"

#   EnableDNS:
#     Description: "DNS Service - Whether to Create Route 53 Resolver, for logging vpc flows"
#     Type: String
#     AllowedValues: ["true", "false"]
#     Default: "true"

#   EnableCloudTrail:
#     Description: "CloudTrail Service - Whether to Create CloudTrail Trail, for logging account entities actions over time"
#     Type: String
#     AllowedValues: ["true", "false"]
#     Default: "true"

Conditions:
  IsOrg: !Not [!Equals [!Ref OrganizationId, "0"]]

#   CreateDNSResources: !Equals [ !Ref DNSEnabled, "true" ]
#   EnableVPCFlowLogs: !Equals [ !Ref VPCFlowLogsEnabled, "true" ]
#   EnableGuardDuty: !Equals [ !Ref GuardDutyEnabled, "true" ]
#   EnableCloudTrail: !Equals [ !Ref CloudTrailEnabled, "true" ]

#   EnableCloudTrail: !Equals [ !Ref CloudTrailEnabled, "true" ]

#   EnableGuardDutyCondition: !Equals [!Ref EnableGuardDuty, "true"]
#   EnableResolverCondition: !Equals [!Ref EnableResolver, "true"]
#   # DeployGuardDutyForAccounts: !And [!Condition EnableGuardDutyForOrg, !Not [!Equals [!Ref AccountList, "0"]]]
#   # DeployGuardDutyForOUs: !And [!Condition EnableGuardDutyForOrg, !Not [!Equals [!Ref OUList, "0"]]]
#   # DeployResolverForAccounts: !And [!Condition EnableResolverForOrg, !Not [!Equals [!Ref AccountList, "0"]]]
#   # DeployResolverForOUs: !And [!Condition EnableResolverForOrg, !Not [!Equals [!Ref OUList, "0"]]]

#   # if DeployList is empty and others are not
#   CheckDeployList: !And
#     - !Equals [!Ref DeployList, "0"]
#     - !Not [!Equals [!Ref AccountList, "0"]]
#     - !Not [!Equals [!Ref OUList, "0"]]

Resources:
  #------------------Cyngular Bucket-------------------
  # CyngularS3Bucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Join ['-', ['cyngular', !Ref ClientName, 'bucket', !Ref AWS::AccountId]]
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration: 
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: 'AES256'
  #     PublicAccessBlockConfiguration: 
  #       BlockPublicAcls: True
  #       BlockPublicPolicy: True
  #       IgnorePublicAcls: True
  #       RestrictPublicBuckets: True
  #     Tags: 
  #       - Key: Name
  #         Value: !Join ['-', ['cyngular', !Ref ClientName, 'bucket', !Ref AWS::AccountId]]

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CyngularS3Bucket

      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'CloudTrailAclCheck'
            Effect: 'Allow'
            Principal: 
              Service: "cloudtrail.amazonaws.com"
            Action:
              - 's3:GetBucketAcl'
            Resource: !GetAtt CyngularS3Bucket.Arn
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/cyngular-cloudtrail"
        #   - Sid: 'CloudTrailWriteAcc'
        #     Effect: 'Allow'
        #     Principal: 
        #       Service: "cloudtrail.amazonaws.com"
        #     Action:
        #       - 's3:PutObject'
        #     Resource: !Sub "${CyngularS3Bucket.Arn}/AWSLogs/${AWS::AccountId}/*"
        #     Condition:
        #       StringEquals:
        #         - "s3:x-amz-acl": "bucket-owner-full-control"
        #         - "AWS:SourceArn": !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/cyngular-cloudtrail"
        # #   - !If 
        # #     - EnableCloudTrail
        # #     - Effect: "Allow"
        # #         Action:
        # #         - "cloudtrail:DescribeTrails"
        # #         - "cloudtrail:GetTrailStatus"
        # #         Resource: "*"
        # #     - !Ref "AWS::NoValue"

        #   - Sid: 'CloudTrailWriteOrg'
        #     Effect: 'Allow'
        #     Principal: 
        #       Service: "cloudtrail.amazonaws.com"
        #     Action:
        #       - 's3:PutObject'
        #     Resource: !Sub "${CyngularS3Bucket.Arn}/AWSLogs/${OrganizationId}/*"
        #     Condition:
        #       StringEquals:
        #         - "s3:x-amz-acl": "bucket-owner-full-control"
        #         - "AWS:SourceArn": !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/cyngular-cloudtrail"
        #   - Sid: 'AthenaLambdaRead'
        #     Effect: 'Allow'
        #     Principal: 
        #       Service: "lambda.amazonaws.com"
        #     Action:
        #       - 's3:GetBucketLocation'
        #       - 's3:GetObject'
        #       - 's3:ListBucket'
        #       - 's3:ListBucketMultipartUploads'
        #       - 's3:ListMultipartUploadParts'
        #       - 's3:AbortMultipartUpload'
        #     Resource: 
        #       - !Sub "${CyngularS3Bucket.Arn}/AWSLogs/${OrganizationId}/*"
        #       - !Sub "${CyngularS3Bucket.Arn}/AWSLogs/${AWS::AccountId}/*"
        #     Condition:
        #       ArnLike:
        #         "aws:SourceArn": !Sub "arn:aws:lambda:${AWS::Region}:${CyngularAccountId}:function:Search_Athena_Lambda-${ClientName}"

  ClientCloudTrail: 
    DependsOn: S3BucketPolicy
    # Condition: CreateCloudTrail
    Type: AWS::CloudTrail::Trail
    Properties: 
      S3BucketName: !Ref CyngularS3Bucket
      IsMultiRegionTrail: True
      IsOrganizationTrail: True
      IncludeGlobalServiceEvents: True
      InsightSelectors: 
          - InsightType : ApiCallRateInsight
          - InsightType : ApiErrorRateInsight
      TrailName: cyngular-cloudtrail
      IsLogging: true
      EventSelectors:
        - IncludeManagementEvents: True
          ExcludeManagementEventSources: 
            - kms.amazonaws.com
          DataResources: 
            - Type: 'AWS::Lambda::Function'
              Values: 
                - 'arn:aws:lambda'
      Tags: 
        - Key: Name
          Value: cyngular-cloudtrail

#------------------Cyngular Client Role-------------------
  ClientCyngularRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', ['cyngular-readonly-role', !Ref ClientName]]
      AssumeRolePolicyDocument:
        {
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "AWS": !Join ['', ["arn:aws:iam::", !Ref CyngularAccountId, ":root"]]
            },
            "Action": "sts:AssumeRole",
            "Condition": {}
        }
    ]
    }
      Policies:
        - PolicyName: "cyngular-readonly-policy"
          PolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Sid": "ec2CyngularSnapshot",
                "Effect": "Allow",
                "Action": [
                    "ec2:DeleteSnapshot",
                    "ec2:ModifySnapshotAttribute"
                ],
                "Resource": "*",
                "Condition": {
                    "StringLike": {
                        "aws:ResourceTag/Name": "cyngular*"
                    }
                }
            },
            {
                "Sid": "ec2CreateSnapshot",
                "Effect": "Allow",
                "Action": [
                    "ec2:CopySnapshot",
                    "ec2:CreateSnapshot",
                    "ec2:CreateSnapshots"
                ],
                "Resource": "*"
            },
            {
                "Sid": "readOnly",
                "Effect": "Allow",
                "Action": [
                    "kms:List*",
                    "kms:Describe*",

                    "iam:List*",
                    "iam:Get*",

                    "rds:List*",

                    "s3:List*",
                    "s3:Describe*",
                    "s3:GetBucketLocation",

                    "logs:List*",
                    "logs:Describe*",
                    "logs:Get*",
                    "logs:FilterLogEvents",

                    "rds:Describe*",

                    "ecr:Describe*",
                    "ecr:List*",

                    "eks:Describe*",
                    "eks:List*",

                    "ecs:List*",

                    "ec2:List*",
                    "ec2:CreateTags",
                    "ecs:Describe*",
                    "ec2:Describe*",

                    "lambda:List*",
                    "lambda:Get*",

                    "organizations:Describe*",
                    "organizations:List*",

                    "cloudformation:Describe*",
                    "cloudformation:List*",
                    "cloudformation:Get*",

                    "guardduty:List*",
                    "guardduty:Get*",

                    "ce:GetCostAndUsage",
                    "ce:GetDimensionValues"
                ],
                "Resource": "*"
            },
            {
                "Sid": "s3GetObject",
                "Effect": "Allow",
                "Action": "s3:GetObject*",
                "Resource": [
                    !Join ['', ['arn:aws:s3:::cyngular-', !Ref ClientName, '-bucket-', !Ref AWS::AccountId]],
                    !Join ['', ['arn:aws:s3:::cyngular-', !Ref ClientName, '-bucket-', !Ref AWS::AccountId, '/*']]
                ]
            },
            {
                "Sid": "volumeDecrypt",
                "Effect": "Allow",
                "Action": [
                    "kms:Decrypt",
                    "kms:CreateGrant"
                ],
                "Resource": "*"
            },
            {
                "Sid": "cyngularKmsKey",
                "Effect": "Allow",
                "Action": [
                    "kms:*"
                ],
                "Resource": "*",
                "Condition": {
                    "StringLike": {
                        "aws:ResourceTag/Name": "cyngular*"
                    }
                }
            }
        ]
    }
#------------------Cyngular Lambda A Role-------------------  
  LambdasRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', ['cyngular-lambda-role-', !Ref ClientName]]
      AssumeRolePolicyDocument:
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        }

      Policies:
        - PolicyName: "cyngular-lambda-policy"
          PolicyDocument: {
                              "Version": "2012-10-17",
                              "Statement": [
                                  {
                                      "Sid": "VisualEditor0",
                                      "Effect": "Allow",
                                      "Action": [
                                          "route53resolver:*",

                                          "organizations:ListAccounts",

                                          "ec2:Describe*",
                                          "ec2:CreateFlowLogs",
                                          "ec2:CreateTags",
                                          "ec2:DeleteFlowLogs",
                                          "ec2:DeleteTags",

                                          "ssm:*",

                                          "logs:*",

                                          "eks:List*",
                                          "eks:UpdateClusterConfig",

                                          "guardduty:*"                                            
                                      ],
                                      "Resource": "*"
                                  },
                                  {
                                      "Sid": "cyngularEvent",
                                      "Effect": "Allow",
                                      "Action": [
                                          "events:*"
                                      ],
                                      "Resource": "*"
                                  },
                                  {
                                      "Sid": "cyngularBuckets",
                                      "Effect": "Allow",
                                      "Action": [
                                          "s3:*"
                                      ],
                                      "Resource": [
                                        !Join ['', ['arn:aws:s3:::cyngular-', !Ref ClientName, '-bucket-', !Ref AWS::AccountId]],
                                        !Join ['', ['arn:aws:s3:::cyngular-', !Ref ClientName, '-bucket-', !Ref AWS::AccountId, '/*']]
                                      ]
                                  }
                              ]
                          }

#   CyngularLambdaA:
#     Type: AWS::Lambda::Function
#     Properties:
#       FunctionName: cyngular-lambda-create-resources
#       Description: Created by Cyngular Security.
#       Code:
#         # S3Bucket: !Ref S3BucketURL
#         # S3Key: path/to/code.zip
#         ZipFile: !Sub | 
#             import boto3
#             import traceback
#             import os
#             import logging

#             def osinternals(cur_region_name):
#                 try:
#                     logging.info('STARTING OS INTERNALS...')
#                     ec2_client = boto3.client('ec2', region_name=cur_region_name)
#                     ssm_client = boto3.client('ssm', region_name=cur_region_name)

#                     all_instances = ec2_client.describe_instances()
#                     instance_ids = []
#                     for reservation in all_instances['Reservations']:
#                         for instance in reservation['Instances']:
#                             instance_ids.append(instance['InstanceId'])

#                     auditd_rules = ''
                    
#                     for instance_id in instance_ids:
#                         try:
#                             logging.info(f'CONFIGURING OS INTERNALS ON INSTANCE-ID: {instance_id}')
#                             response = ssm_client.send_command(
#                                         InstanceIds=[instance_id],
#                                         DocumentName="AWS-RunShellScript",
#                                         Parameters={'commands': ['apt-get update -y','apt-get install -y auditd','systemctl kill auditd.service', 'sleep 10', f'echo {auditd_rules} | base64 --decode > "/etc/audit/rules.d/audit.rules"', 'sleep 10','systemctl start auditd.service']
#                                                 }
#                                         )
#                             logging.info(f'COMMAND SUCCEEDED.')
#                         except Exception as e:
#                             pass
#                 except Exception as e:
#                     logging.critical(str(e))

#             def ekslogs(cur_region_name):
#                 try:
#                     logging.info('STARTING EKSLOGS...')
#                     wanted_cluster_logging_config = {
#                                                 'clusterLogging': [
#                                                     {
#                                                         'types': [
#                                                             'audit', 'authenticator'
#                                                         ],
#                                                         'enabled': True
#                                                     }
#                                                 ]
#                                             }

#                     eks_client = boto3.client('eks', region_name = cur_region_name)
#                     clusters = eks_client.list_clusters()['clusters']

#                     for cluster_name in clusters:
#                         logging.info(f'CONFIGURING EKSLOGS ON CLUSTER: {cluster_name}')
#                         try:
#                             eks_client.update_cluster_config(
#                                 name = cluster_name,
#                                 logging = wanted_cluster_logging_config
#                                 )
#                             logging.info(f'COMMAND SUCCEEDED.')
#                         except Exception as e:
#                             if 'No changes needed for the logging config provided' not in str(e):
#                                 logging.critical (f'COMMAND FAILED - {str(e)}')

#                 except Exception as e:
#                     logging.critical(str(e))

#             def dnslogs(cur_region_name):
#                 try:
#                     logging.info(f'STARTING DNSLOGS...')

#                     r_53 = boto3.client('route53resolver', region_name=cur_region_name)
#                     ec2 = boto3.client('ec2', region_name=cur_region_name)
                    
#                     region_query_log_configs = r_53.list_resolver_query_log_configs()['ResolverQueryLogConfigs']
#                     cyngular_resolver_id = ''
                    
#                     for region_query_log_config in region_query_log_configs:
#                         try:
#                             if region_query_log_config['Name'] == 'cyngular_dns':
#                                 cyngular_resolver_id = region_query_log_config['Id']
#                                 break
#                         except:
#                             pass

#                     if cyngular_resolver_id:
#                         vpc_list = ec2.describe_vpcs()
#                         if "Vpcs" in vpc_list:                  
#                             for vpc in vpc_list["Vpcs"]:
#                                 try:
#                                     vpc_id = vpc["VpcId"]
#                                     logging.info(f'CONFIGURING DNSLOGS ON VPC-ID: {vpc_id}')
#                                     resp = r_53.associate_resolver_query_log_config(ResolverQueryLogConfigId = cyngular_resolver_id, ResourceId = vpc_id )
#                                     logging.info(f'COMMAND SUCCEEDED.')
#                                 except Exception as e:
#                                     if 'already associated' in str(e):
#                                         logging.critical(f'{vpc_id} - ResolverAlreadyAssociated')
#                                     else:
#                                         logging.critical(str(e))
#                 except Exception as e:
#                     logging.critical(str(e))

#             def cyngular_function(event, context):
                
#                 try:
#                     logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
#                     logger = logging.getLogger()
#                     logger.setLevel(logging.INFO)
#                     logging.info('STRATING CYNGULARS FUNCTION...')
#                     func_lst = [osinternals, ekslogs, dnslogs]
#                     ec2_client = boto3.client('ec2')
#                     events_client=boto3.client('events')
#                     LAMBDA_REGIONS = os.environ['LAMBDA_REGIONS'].split(' ')
                    
#                     for curr_region in LAMBDA_REGIONS:
#                         logging.info(f'AWS REGION: {curr_region}')
#                         for func in func_lst:
#                             try:
#                                 func(curr_region)
#                             except Exception as e:
#                                 logging.critical(str(e))
#                     logging.info('ACTIVATING EVENT BUS RULE')
#                     response = events_client.put_rule(
#                         Name='cyngular-lambda-create-resources-rule',
#                         ScheduleExpression="cron(0 8 * * ? *)",
#                         State='ENABLED',
#                         Description='LambdaBScheduledRule',
#                         EventBusName='default'
#                     )
#                     logging.info('DONE!')

#                 except Exception as e:
#                     logging.critical(str(e))
#       Environment:
#         Variables:
#           LAMBDA_REGIONS: !Join [" ", !Ref ClientRegions] 
    
#       Runtime: "python3.9"
#       Handler: index.cyngular_function
#       Timeout: 300
#       Role: !GetAtt LambdasRole.Arn
  
#   LambdaAScheduledRule: 
#     Type: AWS::Events::Rule
#     Properties: 
#       Name: cyngular-lambda-create-resources-rule
#       Description: "LambdaAScheduledRule"
#       ScheduleExpression: "cron(*/30 * * * ? *)"
#       State: "ENABLED"
#       Targets: 
#         - Arn: !GetAtt CyngularLambdaA.Arn
#           Id: "TargetFunctionV1"

#   PermissionForEventsToInvokeLambdaA: 
#     Type: AWS::Lambda::Permission
#     Properties: 
#       FunctionName: !GetAtt CyngularLambdaA.Arn
#       Action: "lambda:InvokeFunction"
#       Principal: "events.amazonaws.com"
#       SourceArn: !GetAtt LambdaAScheduledRule.Arn

# #------------------Cyngular Lambda B-------------------
#   CyngularLambdaB:
#     Type: AWS::Lambda::Function
#     Properties:
#       FunctionName: cyngular-lambda-create-vpcflowlogs 
#       Description: Created by Cyngular Security.
#       Code:
#         ZipFile: !Sub | 
#             import boto3
#             import traceback
#             import os
#             import logging

#             def vpcflowlogs(cur_region_name):
#                 try:
#                     logging.info('STARTING VPCFLOWLOGS...')

#                     vpc_id_list = []
#                     ec2 = boto3.client('ec2', region_name=cur_region_name)
                                        
#                     vpc_list = ec2.describe_vpcs()
#                     if "Vpcs" in vpc_list:                  
#                         for vpc in vpc_list["Vpcs"]:
#                             vpc_id_list.append(vpc["VpcId"])

#                     logging.info(f'CONFIGURING VPCFLOWLOGS ON VPC-IDS: {vpc_id_list}')
#                     response = ec2.create_flow_logs(
#                         ResourceIds=vpc_id_list,
#                         ResourceType='VPC',
#                         TrafficType='ALL',
#                         LogDestinationType='s3',
#                         LogDestination='${CyngularS3Bucket.Arn}',
#                         TagSpecifications=[
#                             {
#                                 'ResourceType': 'vpc-flow-log',
#                                 'Tags': [
#                                     {
#                                         'Key': 'Name',
#                                         'Value': 'Cyngular-vpc-flowlogs'
#                                     },
#                                 ]
#                             },
#                         ]
#                     )
#                     logging.info(f'COMMAND SUCCEEDED.')

#                 except Exception as e:
#                     if 'FlowLogAlreadyExists' in str(e):
#                         pass
#                     else:
#                         logging.critical(str(e))

#             def cyngular_function(event, context):
                
#                 try:
#                     logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
#                     logger = logging.getLogger()
#                     logger.setLevel(logging.INFO)
#                     logging.info('STRATING CYNGULARS FUNCTION...')
#                     func_lst = [vpcflowlogs]
#                     ec2_client = boto3.client('ec2')
#                     events_client=boto3.client('events')
#                     regions = os.environ['LAMBDA_REGIONS'].split(' ')

#                     for cur_region_name in regions:
#                         logging.info(f'AWS REGION: {cur_region_name}')
#                         for func in func_lst:
#                             try:
#                                 func(cur_region_name)
#                             except Exception as e:
#                                 logging.critical(str(e))
#                     logging.info('ACTIVATING EVENT BUS RULE')
#                     response = events_client.put_rule(
#                         Name='cyngular-lambda-create-vpcflowlogs-rule',
#                         ScheduleExpression="cron(0 8 * * ? *)",
#                         State='ENABLED',
#                         Description='LambdaBScheduledRule',
#                         EventBusName='default'
#                     )
#                     logging.info('DONE!')

#                 except Exception as e:
#                     logging.critical(str(e))
#       Environment:
#         Variables:
#           LAMBDA_REGIONS: !Join [" ", !Ref ClientRegions]

#       Runtime: "python3.9"
#       Handler: index.cyngular_function
#       Timeout: 300
#       Role: !GetAtt LambdasRole.Arn
  
#   LambdaBScheduledRule: 
#     Type: AWS::Events::Rule
#     Properties: 
#       Name: cyngular-lambda-create-vpcflowlogs-rule
#       Description: "LambdaBScheduledRule"
#       ScheduleExpression: "cron(*/30 * * * ? *)"
#       State: "ENABLED"
#       Targets: 
#         - Arn: !GetAtt CyngularLambdaB.Arn
#           Id: "TargetFunctionV1"

#   PermissionForEventsToInvokeLambdaB: 
#     Type: AWS::Lambda::Permission
#     Properties: 
#       FunctionName: !GetAtt CyngularLambdaB.Arn
#       Action: "lambda:InvokeFunction"
#       Principal: "events.amazonaws.com"
#       SourceArn: !GetAtt LambdaBScheduledRule.Arn
  
# #------------------Cyngular Lambda C-------------------
#   CyngularLambdaC:
#     Type: AWS::Lambda::Function
#     Properties:
#       FunctionName: cyngular-lambda-delete-vpcflowlogs
#       Description: Created by Cyngular Security.
#       Code:
#         ZipFile: !Sub | 
#             import boto3
#             import traceback
#             import os
#             import logging

#             def vpcflowlogs(cur_region_name):
#                 try:
#                     logging.info('DELETING VPCFLOWLOGS...')

#                     flowlogs_ids_list = []
#                     ec2 = boto3.client('ec2', region_name=cur_region_name)
                    
#                     response = ec2.describe_flow_logs(
#                         Filters=[
#                                 {
#                                     'Name': 'tag:Name',
#                                     'Values': [
#                                         'Cyngular-vpc-flowlogs'
#                                     ]
#                                 },
#                             ]
#                         )
#                     # getting all the cyngular vpc flowlogs in curr region 
#                     for flow_log in response['FlowLogs']:
#                         flowlogs_ids_list.append(flow_log['FlowLogId'])
                    
#                     logging.info(f'DELETING THE VPCFLOWLOGS: {flowlogs_ids_list}')
#                     response = ec2.delete_flow_logs(
#                         FlowLogIds=flowlogs_ids_list
#                     )
#                     logging.info(f'COMMAND SUCCEEDED.')
#                 except Exception as e:
#                     logging.critical(str(e))
                    
#             def cyngular_function(event, context):
                
#                 try:
#                     logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
#                     logger = logging.getLogger()
#                     logger.setLevel(logging.INFO)
        
#                     logging.info('STRATING CYNGULARS FUNCTION...')
#                     func_lst = [vpcflowlogs]
#                     ec2_client = boto3.client('ec2')
#                     events_client = boto3.client('events')
#                     regions = os.environ['LAMBDA_REGIONS'].split(' ')

#                     for cur_region_name in regions:
#                         logging.info(f'AWS REGION: {cur_region_name}')
#                         for func in func_lst:
#                             try:
#                                 func(cur_region_name)
#                             except Exception as e:
#                                 logging.critical(str(e))
#                     logging.info('DEACTIVATING EVENT BUS RULE')
#                     response = events_client.disable_rule(
#                         Name='cyngular-lambda-create-vpcflowlogs-rule',
#                         EventBusName='default'
#                     )
#                     logging.info('DONE!')

#                 except Exception as e:
#                     logging.critical(str(e))
#       Environment:
#         Variables:
#           LAMBDA_REGIONS: !Join [" ", !Ref ClientRegions]

#       Runtime: "python3.9"
#       Handler: index.cyngular_function
#       Timeout: 300
#       Role: !GetAtt LambdasRole.Arn
  
#   CyngularLambdaD:
#     Type: AWS::Lambda::Function
#     Properties:
#       FunctionName: cyngular-lambda-delete-resources  
#       Description: Created by Cyngular Security.
#       Code:
#         ZipFile: !Sub | 
#             import boto3
#             import traceback
#             import os
#             import logging
            
#             def dnslogs(cur_region_name):
#                 try:
#                     logging.info(f'DELETING DNSLOGS...')

#                     r_53 = boto3.client('route53resolver', region_name=cur_region_name)
#                     ec2 = boto3.client('ec2', region_name=cur_region_name)
                    
#                     region_query_log_configs = r_53.list_resolver_query_log_configs()['ResolverQueryLogConfigs']
#                     cyngular_resolver_id = ''
                    
#                     for region_query_log_config in region_query_log_configs:
#                         try:
#                             if region_query_log_config['Name'] == 'cyngular_dns':
#                                 cyngular_resolver_id = region_query_log_config['Id']
#                                 break
#                         except:
#                             pass

#                     if cyngular_resolver_id:
#                         vpc_list = ec2.describe_vpcs()
#                         if "Vpcs" in vpc_list:                  
#                             for vpc in vpc_list["Vpcs"]:
#                                 try:
#                                     vpc_id = vpc["VpcId"]
#                                     logging.info (f'DELETING CONFIGURATION OF DNSLOGS ON VPC-ID: {vpc_id}')
#                                     resp = r_53.disassociate_resolver_query_log_config(ResolverQueryLogConfigId = cyngular_resolver_id, ResourceId = vpc_id )
#                                     logging.info(f'COMMAND SUCCEEDED.')
#                                 except Exception as e:
#                                     if "association doesn't exist" in str(e):
#                                         logging.critical(f'{vpc_id} - ResolverWasNotAssociated')
#                                     else:
#                                         logging.critical(str(e))
#                 except Exception as e:
#                     logging.critical(str(e))

#             def cyngular_function(event, context):
                
#                 try:
#                     logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
#                     logger = logging.getLogger()
#                     logger.setLevel(logging.INFO)
#                     logging.info ('STRATING CYNGULARS FUNCTION...')
#                     func_lst = [dnslogs]
#                     ec2_client = boto3.client('ec2')
#                     events_client = boto3.client('events')
#                     regions = os.environ['LAMBDA_REGIONS'].split(' ')

#                     for cur_region_name in regions:
#                         logging.info (f'AWS REGION: {cur_region_name}')
#                         for func in func_lst:
#                             try:
#                                 func(cur_region_name)
#                             except Exception as e:
#                                 logging.critical(str(e))
#                     logging.info('DEACTIVATING EVENT BUS RULE')
#                     response = events_client.disable_rule(
#                         Name='cyngular-lambda-create-resources-rule',
#                         EventBusName='default'
#                     )
#                     logging.info('DONE!')

#                 except Exception as e:
#                     logging.critical(str(e))
#       Environment:
#         Variables:
#           LAMBDA_REGIONS: !Join [" ", !Ref ClientRegions]

#       Runtime: "python3.9"
#       Handler: index.cyngular_function
#       Timeout: 300
#       Role: !GetAtt LambdasRole.Arn
  
  CyngularLambdaE:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: cyngular-lambda-update-cyngular-bucket
      Description: Created by Cyngular Security.
      Code:
        ZipFile: !Sub | 
            import boto3
            import traceback
            import os
            import logging
            import json

            def trigger_manager_lambda():
                lambda_client = boto3.client('lambda')
                response = lambda_client.invoke(
                    FunctionName='cyngular-lambda-manager-function',
                    InvocationType = 'RequestResponse',
                    LogType='Tail',
                    ClientContext='',
                )
            def get_account_ids_lst_by_organization():
                account_ids_lst = []

                try:
                    client = boto3.client('organizations')
                    response = client.list_accounts()
                  
                    if 'Accounts' in response:
                        for account_info in response['Accounts']:
                            if 'Id' in account_info:
                                account_ids_lst.append(account_info['Id'])

                except Exception as e:
                    logging.critical("CloudServiceFunctions (ERROR) - while trying to get account ids by organization: " + str(e))

                return account_ids_lst

            def update_cyngular_bucket():
                try:
                    s3_client = boto3.client('s3')
                    
                    response = s3_client.get_bucket_policy(
                        Bucket='cyngular-${ClientName}-bucket-${AWS::AccountId}'
                    )
                    
                    account_ids_list = get_account_ids_lst_by_organization()
                    account_arns_list = []
                    organization_accounts_ids_list = []
                    for account_id in account_ids_list:
                        account_arns_list.append(f"\"arn:aws:logs:*:{account_id}:*\"")
                        organization_accounts_ids_list.append(f"\"{account_id}\"")
                    new_statement = '''[
                        {
                            "Sid": "AWSLogDeliveryWrite",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "delivery.logs.amazonaws.com"
                            },
                            "Action": "s3:PutObject",
                            "Resource": "${CyngularS3Bucket.Arn}/*",
                            "Condition": {
                                "ArnLike": {
                                    "AWS:SourceArn": [$%ACCOUNT_ARNS_LIST%$]
                                }
                            }
                        },
                        {
                            "Sid": "AWSLogDeliveryAclCheck",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "delivery.logs.amazonaws.com"
                            },
                            "Action": [
                                "s3:GetBucketAcl",
                                "s3:ListBucket"
                            ],
                            "Resource": "${CyngularS3Bucket.Arn}",
                            "Condition": {
                                "ArnLike": {
                                    "aws:SourceArn": [$%ACCOUNT_ARNS_LIST%$]
                                }
                            }
                        }
                    ]
                '''.replace('$%ACCOUNT_ARNS_LIST%$', ','.join(account_arns_list)).replace('$%ACCOUNT_IDS_LIST%$', ','.join(organization_accounts_ids_list))
                    new_statement_json = json.loads(new_statement)
                    reponse_policy = json.loads(response['Policy'])
                    statement_policy = reponse_policy['Statement']
                    statement_policy.extend(new_statement_json)
                    new_policy = {}
                    new_policy['Statement'] = statement_policy
                    new_policy['Version'] = '2012-10-17'

                    response = s3_client.put_bucket_policy(
                        Bucket='cyngular-${ClientName}-bucket-${AWS::AccountId}',
                        Policy=json.dumps(new_policy)
                    )
                    logging.info(response)
                except Exception as e:
                    logging.critical(str(e))
                
            def cyngular_function(event, context):
                  
                try:
                    logging.info('STRATING CYNGULARS FUNCTION...')
                    ec2_client = boto3.client('ec2')
                    events_client=boto3.client('events')
                    logging.info('UPDATING CYNGULAR BUCKET POLICY')
                    update_cyngular_bucket()
                    logging.info('DONE!')

                except Exception as e:
                    logging.critical(str(e))
      Runtime: "python3.9"
      Handler: index.cyngular_function
      Timeout: 300
      Role: !GetAtt LambdasRole.Arn

  ManagerLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Join ['-', ['cyngular-manager-lambda-role', !Ref ClientName]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "CloudFormationPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:InvokeAsync"
                  - "lambda:GetFunction"

                  - "logs:*"

                  - "cloudformation:DescribeStacks"
                  - "cloudformation:DescribeStackSet"
                  - "cloudformation:CreateStack"
                  - "cloudformation:CreateStackSet"
                  - "cloudformation:CreateStackInstances"
                  - "cloudformation:GetTemplateSummary"
                  - "cloudformation:DescribeStackSetOperation"
                  - "cloudformation:ListStackSetOperationResults"
                  - "cloudformation:DeleteStackSet"
                  - "cloudformation:DeleteStackInstances"

                  - "guardduty:TagResource"
                  - "guardduty:ListDetectors"
                  - "guardduty:CreateDetector"

                  - "organizations:ListAccounts"

                  - "sts:GetCallerIdentity"

                  - "s3:GetObject"

                  - "iam:GetRole"
                  - "iam:DetachRolePolicy"
                  - "iam:AttachRolePolicy"
                  - "iam:DeleteRolePolicy"
                  - "iam:PutRolePolicy"
                  - "iam:getRolePolicy"
                Resource:
                  - "*"

  CreateAdminAndExecutionRolesLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Join ['-', ['cyngular-admin-and-exec-roles-lambda-role', !Ref ClientName]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "CloudFormationPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:CreateStack"
                  - "cloudformation:CreateStackSet"
                  - "cloudformation:DescribeStackSet"
                  - "cloudformation:CreateStackInstances"
                  - "cloudformation:DescribeStackSetOperation"
                  - "cloudformation:DeleteStackInstances"
                  - "cloudformation:ListStackSetOperationResults"
                  - "cloudformation:UpdateStackSet"
                  - "cloudformation:UpdateStackInstances"
                  - "cloudformation:DeleteStackSet"
                  - "cloudformation:ListStackInstances"
                  - "cloudformation:DescribeStackEvents"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:CreateChangSet"

                  - "organizations:ListAccounts"
                  - "organizations:ListRoots"

                  - "s3:GetObject"
                  
                  - "iam:GetRole"
                  - "iam:CreateRole"
                  - "iam:AttachRolePolicy"
                  - "iam:PutRolePolicy"
                  - "iam:getRolePolicy"
                  
                  - "logs:*"
                Resource:
                  - "*"

  CyngularManagerLambda:
    DependsOn: [ManagerLambdaRole, CyngularLambdaE,CyngularS3Bucket, CreateAdminAndExecutionRolesLambda]
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: cyngular-lambda-manager-function
      Description: Created by Cyngular Security.
      Code:
        ZipFile: !Sub |
            import boto3
            import time
            import os
            import cfnresponse
            import logging

            def get_child_accounts(management_account_id):
                """
                Gets a list of all child accounts in the organization from a management account.
                """
                org_client = boto3.client('organizations')
                
                # Get a list of all accounts in the organization
                account_list = org_client.list_accounts()
                
                # Create a list to store the child accounts
                child_accounts = []
                
                # Loop through each account in the list and check if it is a child account
                for account in account_list['Accounts']:
                    if account['Id'] != management_account_id:
                        child_accounts.append(account['Id'])
                
                # Return the list of child accounts
                return child_accounts

            def guardduty_exists(region):
                client = boto3.client('guardduty', region)
                response = client.list_detectors()
                if len(response['DetectorIds']) == 0:
                    return False
                return True
            def create_guardduty():
                ClientRegionsList = os.environ['ClientRegions'].split(',')
                for region in ClientRegionsList:
                    if guardduty_exists(region):
                        logging.info(f'guardduty found in {region}, adding cyngular tag')
                        client = boto3.client('guardduty', region)
                        response = client.list_detectors()
                        detector_id = response['DetectorIds'][0]
                        # add cyngular tag
                        sts_client = boto3.client('sts')
                        account_id = sts_client.get_caller_identity()['Account']
                        response = client.tag_resource(Tags={'Value' : 'cyngular-guardduty'}, ResourceArn=f'arn:aws:guardduty:{region}:{account_id}:detector/{detector_id}')
                    
                    else:
                        logging.info(f'creating guardduty in {region}')
                        # create guard duties
                        client = boto3.client('guardduty', region)
                        detector_properties = {
                            'Enable': True,
                            'FindingPublishingFrequency': 'FIFTEEN_MINUTES',
                            'DataSources': {
                                'S3Logs': {
                                    'Enable': True
                                },
                            },
                            'Tags': [
                                {
                                    'Value': 'cyngular-guardduty'
                                }
                            ]
                        }
                        
                        # Create the detector
                        response = client.create_detector(
                            Enable=True,
                            FindingPublishingFrequency='FIFTEEN_MINUTES',
                            DataSources=detector_properties['DataSources'],
                            Tags=detector_properties['Tags'][0]
                        )
            def create_stack2(url):
                stack_client = boto3.client('cloudformation')
                stack_client.create_stack(
                    StackName='cyngular-stack2',
                    TemplateURL=url,
                    Parameters=[
                        {
                            'ParameterKey': 'ClientName',
                            'ParameterValue': os.environ['ClientName']
                        },
                        {
                            'ParameterKey': 'deployRegions',
                            'ParameterValue': os.environ['ClientRegions']
                        },
                        {
                            'ParameterKey': 'S3ManagementBucketArn',
                            'ParameterValue': os.environ['S3BucketArn']
                        },
                        {
                            'ParameterKey': 'CyngularAccountId',
                            'ParameterValue': os.environ['CyngularAccountId']
                        }
                    ],
                    Capabilities=['CAPABILITY_IAM']
                )
            def create_stackset1(child_accounts,url):
                stack_client = boto3.client('cloudformation')
                client = boto3.client('s3') # example client, could be any
                stack_client.create_stack_set(
                StackSetName='cyngular-stackset-1',
                PermissionModel='SELF_MANAGED',
                TemplateURL=url,
                Parameters = [

                    {
                        'ParameterKey': 'ClientName',
                        'ParameterValue': os.environ['ClientName']
                    },
                    {
                        'ParameterKey': 'CyngularAccountId',
                        'ParameterValue': os.environ['CyngularAccountId']
                    },
                    {
                        'ParameterKey': 'S3BucketArn',
                        'ParameterValue': os.environ['S3BucketArn']
                    },
                    {
                        'ParameterKey': 'ClientRegions',
                        'ParameterValue': (os.environ['ClientRegions']).replace(',',' ')
                    }
                ],
                    Capabilities=['CAPABILITY_IAM',"CAPABILITY_NAMED_IAM"]
                
                )
                stack_client.create_stack_instances(
                        StackSetName = 'cyngular-stackset-1',
                        DeploymentTargets = {
                            "Accounts": child_accounts
                        },
                        OperationPreferences = {
                            'RegionConcurrencyType': 'PARALLEL',
                            'FailureTolerancePercentage': 100,
                            'MaxConcurrentPercentage': 100
                        },
                        Regions = [client.meta.region_name],
                    
                )
            def create_stackset2(child_accounts,url):
                stack_client = boto3.client('cloudformation')
                stack_client.create_stack_set(
                StackSetName='cyngular-stackset-2',
                PermissionModel='SELF_MANAGED',
                TemplateURL=url,
                Parameters=[
                    # {
                    #     'ParameterKey': 'ClientName',
                    #     'ParameterValue': os.environ['ClientName']
                    # },
                    {
                        'ParameterKey': 'CyngularAccountId',
                        'ParameterValue': os.environ['CyngularAccountId']
                    },
                    {
                        'ParameterKey': 'S3BucketArn',
                        'ParameterValue': os.environ['S3BucketArn']
                    },
                    {
                        'ParameterKey': 'ClientRegions',
                        'ParameterValue': os.environ['ClientRegions']
                    }
                ],
                    Capabilities=['CAPABILITY_IAM',"CAPABILITY_NAMED_IAM"]
                )
                stack_client.create_stack_instances(
                        StackSetName = 'cyngular-stackset-2',
                        DeploymentTargets = {
                            "Accounts": child_accounts
                        }
                        ,OperationPreferences = {
                            'RegionConcurrencyType': 'PARALLEL',
                            'FailureTolerancePercentage': 100,
                            'MaxConcurrentPercentage': 100
                        },
                        Regions = os.environ["ClientRegions"].split(','),
                    )

            def invoke_lambdaE():
                try:
                    lambda_client = boto3.client('lambda')
                    response = lambda_client.invoke(
                        FunctionName='cyngular-lambda-update-cyngular-bucket',
                        InvocationType = 'RequestResponse',
                        LogType='Tail',
                    )
                    logging.info('lmbada E invoked!')
                    if response['StatusCode'] != 200:
                        logging.critical(f"Error {response}")
                except Exception as e:
                    logging.critical(str(e))

            def cyngular_function(event, context):
                try:
                    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
                    logger = logging.getLogger()
                    logger.setLevel(logging.INFO)
                    logging.info('STARTING CYNGULAR\'S FUNCTION...')

                    #printing event for responseurl
                    logging.info(f"copy this to manually delete the custom resource: \n{event}")

                    # if the stack is being created
                    if event['RequestType'] == 'Create':        
                        try:
                            stack2_url = event['ResourceProperties']['Stack2URL']
                            stackset1_url = event['ResourceProperties']['StackSet1URL']
                            stackset2_url = event['ResourceProperties']['StackSet2URL']
                            child_accounts = get_child_accounts(os.environ['currentAccountId'])
                            invoke_lambdaE()
                            logging.info("CREATING CYNGULAR STACK2")
                            create_stack2(stack2_url)
                            logging.info("STARING CYNGULAR STACKSET1")
                            create_stackset1(child_accounts,stackset1_url)
                            logging.info("Creating GuardDuties")
                            create_guardduty()
                            logging.info("STARING CYNGULAR STACKSET2")
                            create_stackset2(child_accounts,stackset2_url)
                            logging.info("DONE WITH ALL CYNGULAR STACKS!")
                            cfnresponse.send(event, context, cfnresponse.SUCCESS, {'msg' : 'Done'})

                        except Exception as e:
                            logging.critical(str(e))
                            cfnresponse.send(event, context, cfnresponse.FAILED, {'msg' : str(e)})
                    else:
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, {'msg' : 'No error'})
                except Exception as e:
                    logging.critical(str(e))
                    cfnresponse.send(event, context, cfnresponse.FAILED, {'msg' : str(e)})
      Runtime: "python3.9"
      Handler: index.cyngular_function
      Timeout: 300
      Environment:
        Variables:
          ClientName: !Ref ClientName
          ClientRegions: !Join [",", !Ref ClientRegions]
          CyngularAccountId: !Ref CyngularAccountId
          S3BucketArn: !GetAtt CyngularS3Bucket.Arn
          currentAccountId: !Ref AWS::AccountId
        #   CreatedBucketArn: !GetAtt CyngularS3Bucket.Arn
            
      Role: !GetAtt ManagerLambdaRole.Arn

  ManagerLambdaTrigger:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt CyngularManagerLambda.Arn
      Stack2URL: !Ref Stack2URL
      StackSet1URL: !Ref StackSet1URL
      StackSet2URL: !Ref StackSet2URL

  CreateAdminAndExecutionRolesLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: cyngular-lambda-admin-and-execution-roles
      Description: Created by Cyngular Security.
      Code:
        ZipFile: !Sub |
            import boto3
            import time
            import os
            import cfnresponse
            import logging

            #ROLE TEMPLATES:

            ADMIN_ROLE_TEMPLATE = """
            AWSTemplateFormatVersion: 2010-09-09
            Description: Configure the AWSCloudFormationStackSetAdministrationRole to enable use of AWS CloudFormation StackSets.

            Resources:
              AdministrationRole:
                Type: AWS::IAM::Role
                Properties:
                  RoleName: AWSCloudFormationStackSetAdministrationRole
                  AssumeRolePolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Principal:
                          Service: cloudformation.amazonaws.com
                        Action:
                          - sts:AssumeRole
                  Path: /
                  Policies:
                    - PolicyName: AssumeRole-AWSCloudFormationStackSetExecutionRole
                      PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                          - Effect: Allow
                            Action:
                              - sts:AssumeRole
                            Resource:
                              - "arn:*:iam::*:role/AWSCloudFormationStackSetExecutionRole"
            """

            EXECUTION_ROLE_TEMPLATE = """
            AWSTemplateFormatVersion: 2010-09-09
            Description: Configure the AWSCloudFormationStackSetExecutionRole to enable use of your account as a target account in AWS CloudFormation StackSets.

            Parameters:
              AdministratorAccountId:
                Type: String
                Description: AWS Account Id of the administrator account (the account in which StackSets will be created).
                MaxLength: 12
                MinLength: 12

            Resources:
              ExecutionRole:
                Type: AWS::IAM::Role
                Properties:
                  RoleName: AWSCloudFormationStackSetExecutionRole
                  AssumeRolePolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Principal:
                          AWS:
                            - !Ref AdministratorAccountId
                        Action:
                          - sts:AssumeRole
                  Path: /
                  ManagedPolicyArns:
                    - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess
            """

            def check_role_existence(role_name):
                iam_client = boto3.client('iam')
                try:
                    iam_client.get_role(RoleName=role_name)
                    print(f"The IAM role '{role_name}' exists.")
                    return True
                except Exception as e:
                    print(str(e))
                    return False
            def wait_for(stack_name):
                client = boto3.client('cloudformation')
                waiter = client.get_waiter('stack_create_complete')
                waiter.wait(StackName=stack_name)

            def wait_for_stackset_creation(stackset_name, operation_id):
                client = boto3.client('cloudformation')
                # Get the current status of the StackSet
                response = client.describe_stack_set_operation(
                    StackSetName=stackset_name,
                    OperationId=operation_id
                )
                status = response['StackSetOperation']['Status']
                # Wait for the StackSet to finish creating
                while status == 'RUNNING':
                    time.sleep(10)
                    response = client.describe_stack_set_operation(
                        StackSetName=stackset_name,
                        OperationId=operation_id
                    )
                    status = response['StackSetOperation']['Status']
                if status == 'SUCCEEDED':
                    logging.info('StackSet creation completed successfully.')
                else:
                    logging.info('StackSet creation failed.')

            def get_child_accounts(management_account_id):
                """
                Gets a list of all child accounts in the organization from a management account.
                """
                org_client = boto3.client('organizations')
                
                # Get a list of all accounts in the organization
                account_list = org_client.list_accounts()
                
                # Create a list to store the child accounts
                child_accounts = []
                
                # Loop through each account in the list and check if it is a child account
                for account in account_list['Accounts']:
                    if account['Id'] != management_account_id:
                        child_accounts.append(account['Id'])
                
                # Return the list of child accounts
                return child_accounts

            def create_executionrole_on_childs(child_accounts):
                org_client = boto3.client('organizations')
                root_response = org_client.list_roots()
                if 'Roots' in root_response and len(root_response['Roots']) > 0:
                    root_id = root_response['Roots'][0]['Id']
                else:
                    print("Could not fetch the root ID.")
                    exit(1)

                stack_client = boto3.client('cloudformation')
                stack_client.create_stack_set(
                StackSetName='cyngular-execution-role-stackset',
                PermissionModel='SERVICE_MANAGED',
                AutoDeployment={
                    'Enabled': True,
                    'RetainStacksOnAccountRemoval': True
                },
                TemplateBody=EXECUTION_ROLE_TEMPLATE,
                Parameters=[
                    { 
                        'ParameterKey': 'AdministratorAccountId',
                        'ParameterValue': os.environ['currentAccountId']
                    },
                ],
                    Capabilities=['CAPABILITY_IAM',"CAPABILITY_NAMED_IAM"]
                )
                result = stack_client.create_stack_instances(
                        StackSetName = 'cyngular-execution-role-stackset',
                        OperationPreferences = {
                            'RegionConcurrencyType': 'PARALLEL',
                            'FailureTolerancePercentage': 100,
                            'MaxConcurrentPercentage': 100
                        },
                        DeploymentTargets = {
                            "OrganizationalUnitIds": [root_id] # [os.environ["RootOUid"]]
                        },
                        Regions = [os.environ["ClientRegions"].split(',')[0]]

                    )
                wait_for_stackset_creation("cyngular-execution-role-stackset", result["OperationId"])

            #sets up both the execution and admin role in the management account
            def create_management_execution_role():
                stack_client = boto3.client('cloudformation')
                # Create the new stack with the extracted value of ClientName
                if not check_role_existence("AWSCloudFormationStackSetExecutionRole"):
                    stack_client.create_stack(
                        StackName='cyngular-managment-execution-role',
                        TemplateBody=EXECUTION_ROLE_TEMPLATE,
                        Parameters=[
                            {
                                'ParameterKey': 'AdministratorAccountId',
                                'ParameterValue': os.environ['currentAccountId']
                            },
                            ],
                            Capabilities=['CAPABILITY_IAM', 'CAPABILITY_NAMED_IAM']
                            )
                    wait_for("cyngular-managment-execution-role")

            def create_management_admin_role():
                stack_client = boto3.client('cloudformation')
                # Create the new stack with the extracted value of ClientName
                if not check_role_existence("AWSCloudFormationStackSetAdministrationRole"):
                    stack_client.create_stack(
                        StackName='cyngular-managment-admin-role',
                        TemplateBody=ADMIN_ROLE_TEMPLATE,
                        Capabilities=['CAPABILITY_IAM', 'CAPABILITY_NAMED_IAM']
                        )
                    wait_for("cyngular-managment-admin-role")

            def cyngular_function(event, context):
                try:
                    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
                    logger = logging.getLogger()
                    logger.setLevel(logging.INFO)
                    # if the stack is being created
                    if event['RequestType'] == 'Create':        
                        try:
                            child_accounts = get_child_accounts(os.environ['currentAccountId'])
                            logging.info("CREATING ROLES ON MANAGEMENT ACCOUNT")
                            create_management_execution_role()
                            create_management_admin_role()
                            logging.info("CREATING ROLES ON CHILDS")
                            create_executionrole_on_childs(child_accounts)
                            logging.info("DONE WITH ALL CYNGULAR STACKS!")
                            cfnresponse.send(event, context, cfnresponse.SUCCESS, {'msg' : 'Done'})

                        except Exception as e:
                            logging.critical(str(e))
                            cfnresponse.send(event, context, cfnresponse.FAILED, {'msg' : str(e)})
                    else:
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, {'msg' : 'No error'})
                except Exception as e:
                    logging.critical(str(e))
                    cfnresponse.send(event, context, cfnresponse.FAILED, {'msg' : str(e)})
      Runtime: "python3.9"
      Handler: index.cyngular_function
      Timeout: 300
      Environment:
        Variables:
          ClientName: !Ref ClientName
          ClientRegions: !Join [",", !Ref ClientRegions]
          CyngularAccountId: !Ref CyngularAccountId
          S3BucketArn: !GetAtt CyngularS3Bucket.Arn
        #   RootOUid: !Ref RootOUid
          currentAccountId: !Ref AWS::AccountId
          
      Role: !GetAtt CreateAdminAndExecutionRolesLambdaRole.Arn

#   CreateAdminAndExecutionRoles:
#     Type: AWS::CloudFormation::CustomResource
#     Version: "1.0"
#     Properties:
#       ServiceToken: !GetAtt CreateAdminAndExecutionRolesLambda.Arn

  DeleteCustomResourceLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "CloudFormationPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: '*'

  DeleteCustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: cyngular-lambda-delete-custom-resource
      Description: Created by Cyngular Security.
      Code:
        ZipFile: !Sub |
          import cfnresponse
          '''
          This function was created by cyngular security to delete a custom resource that is stuck
          on creation or deletion. Before running this function, make sure that the resource is actually stuck
          and not just taking time to complete (check the logs).
          If it truly is stuck, copy the event json from the logs and paste them below.
          Then run the function and confirm that the resource was successfully deleted.
          '''
          def lambda_handler(event, context):
            event = {} # copy and paste event from manager lambda logs to here
            cfnresponse.send(event, context, cfnresponse.FAILED, {'msg' : 'Custom resource manually deleted'})
      Runtime: "python3.9"
      Handler: index.cyngular_function
      Timeout: 300
      Role: !GetAtt DeleteCustomResourceLambdaRole.Arn