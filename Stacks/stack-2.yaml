AWSTemplateFormatVersion: 2010-09-09
Description: Create a guardduty detector and route53 resolver
Parameters:

  deployRegions:
    Type: CommaDelimitedList
    Description: The regions in which the client operates (use ,)

  S3ManagementBucketArn:
    Type: String
    Description: The Arn of the created S3 bucket.

  CyngularAccountId:
    Description: The cyngular account id
    Type: String

Resources:
  #------------------Cyngular KMS Key-------------------
  CyngularKmsKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: cyngular_kms_key
      KeyPolicy:
        Id: cyngular-default-1
        Version: "2012-10-17"
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${CyngularAccountId}:root"
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
      Tags: 
        - Key: Name
          Value: cyngular-kms-key
  
  CyngularKmsAlias:
    Type: AWS::KMS::Alias
    Properties: 
        AliasName: alias/cyngular-kms-key
        TargetKeyId: !GetAtt  CyngularKmsKey.Arn

  CyngularResolver:
    # DeletionPolicy: Retain
    Type: AWS::Route53Resolver::ResolverQueryLoggingConfig
    Properties: 
      DestinationArn: !Ref S3ManagementBucketArn
      Name: cyngular_dns

  #-----------------------GuarddutyLambdaRole----------------------------#
  GuarddutyLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "CloudFormationPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                  - "guardduty:TagResource"
                  - "guardduty:ListDetectors"
                  - "guardduty:CreateDetector"
                  - "guardduty:DeleteDetector"
                  - "guardduty:ListTagsForResource"
                Resource:
                  - "*"
  #---------------------GuarddutyCreation--------------------
  CyngularGuarddutyCreationLambda:
    DependsOn: GuarddutyLambdaRole
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: cyngular-guardduty-creation-lambda-function
      Description: Created by Cyngular Security.
      Code:
        ZipFile: !Sub |
            import boto3
            import time
            import os
            import cfnresponse
            import logging

            def guardduty_exists(region):
                client = boto3.client('guardduty', region)
                response = client.list_detectors()
                if len(response['DetectorIds']) == 0:
                    return False
                return True

            def create_guardduty():
                deployRegionsList = os.environ['deployRegions'].split(',')
                for region in deployRegionsList:
                    if guardduty_exists(region):
                        logging.info(f'guardduty found in {region}, adding cyngular tag')
                        client = boto3.client('guardduty', region)
                        response = client.list_detectors()
                        detector_id = response['DetectorIds'][0]
                        # add cyngular tag
                        response = client.tag_resource(Tags={'Value' : 'cyngular-guardduty'}, ResourceArn=f'arn:aws:guardduty:{region}:026207525186:detector/{detector_id}')
                    
                    else:
                        logging.info(f'creating guardduty in {region}')
                        # create guard duties
                        for region in deployRegionsList:
                            client = boto3.client('guardduty', region)
                            detector_properties = {
                                'Enable': True,
                                'FindingPublishingFrequency': 'FIFTEEN_MINUTES',
                                'DataSources': {
                                    'S3Logs': {
                                        'Enable': True
                                    },
                                    
                                    # 'Kubernetes': {
                                    #     'AuditLogs': {
                                    #         'Enable': True
                                    #     }
                                    # }
                                    
                                },
                                'Tags': [
                                    {
                                        'Value': 'cyngular-guardduty'
                                    }
                                ]
                            }
                            
                            # Create the detector
                            response = client.create_detector(
                                Enable=True,
                                FindingPublishingFrequency='FIFTEEN_MINUTES',
                                DataSources=detector_properties['DataSources'],
                                Tags=detector_properties['Tags'][0]
                            )
            def cyngular_function(event, context):
              if event['RequestType'] == 'Create':
                try:
                  create_guardduty()
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {'msg' : 'Finished creating guarduties done'})
                except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {'msg' : str(e)})
              else:
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {'msg' : 'skipping
      Runtime: "python3.9"
      Handler: index.cyngular_function
      Timeout: 300
      Environment:
        Variables:
            deployRegions: !Join [",", !Ref deployRegions]
    
      Role: !GetAtt GuarddutyLambdaRole.

  GuarddutyCreationTrigger:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt CyngularGuarddutyCreationLambda.Arn