AWSTemplateFormatVersion: 2010-09-09
Description: Cyngular organization managment stack template

      # Version: '2012-10-17'
      # Statement:
      #   - Sid: Deny non-HTTPS access
      #     Effect: Deny
      #     Principal:
      #       Service: guardduty.amazonaws.com
      #     Action: s3:*
      #     Resource: arn:aws:s3:::cyngular-hotrod-bucket-026207525186/*
      #     Condition:
      #       Bool:
      #         aws:SecureTransport: 'false'
      #   - Sid: Deny incorrect encryption header
      #     Effect: Deny
      #     Principal:
      #       Service: guardduty.amazonaws.com
      #     Action: s3:PutObject
      #     Resource: arn:aws:s3:::cyngular-hotrod-bucket-026207525186/*
      #     Condition:
      #       StringNotEquals:
      #         s3:x-amz-server-side-encryption-aws-kms-key-id: arn:aws:kms:us-west-2:026207525186:key/62c6f7d8-83ef-4b6b-9071-5139f21aedd2
      #   - Sid: Deny unencrypted object uploads
      #     Effect: Deny
      #     Principal:
      #       Service: guardduty.amazonaws.com
      #     Action: s3:PutObject
      #     Resource: arn:aws:s3:::cyngular-hotrod-bucket-026207525186/*
      #     Condition:
      #       StringNotEquals:
      #         s3:x-amz-server-side-encryption: aws:kms
      #   - Sid: Allow PutObject
      #     Effect: Allow
      #     Principal:
      #       Service: guardduty.amazonaws.com
      #     Action: s3:PutObject
      #     Resource: arn:aws:s3:::cyngular-hotrod-bucket-026207525186/*
      #     Condition:
      #       StringEquals:
      #         aws:SourceArn: arn:aws:guardduty:us-west-2:026207525186:detector/121edf4ce8984dbea5d82a6fbe1207a2
      #         aws:SourceAccount: '026207525186'
      #   - Sid: Allow GetBucketLocation
      #     Effect: Allow
      #     Principal:
      #       Service: guardduty.amazonaws.com
      #     Action: s3:GetBucketLocation
      #     Resource: arn:aws:s3:::cyngular-hotrod-bucket-026207525186
      #     Condition:
      #       StringEquals:
      #         aws:SourceArn: arn:aws:guardduty:us-west-2:026207525186:detector/121edf4ce8984dbea5d82a6fbe1207a2
      #         aws:SourceAccount: '026207525186'
      #   # - Sid: AWSCloudTrailAclCheck20150319
      #   #   Effect: Allow
      #   #   Principal:
      #   #     Service: cloudtrail.amazonaws.com
      #   #   Action: s3:GetBucketAcl
      #   #   Resource: arn:aws:s3:::cyngular-hotrod-bucket-026207525186
      #   #   Condition:
      #   #     StringEquals:
      #   #       AWS:SourceArn: arn:aws:cloudtrail:us-west-2:026207525186:trail/cyngular-cloudtrail
      #   - Sid: AWSLogDeliveryWrite
      #     Effect: Allow
      #     Principal:
      #       Service: delivery.logs.amazonaws.com
      #     Action: s3:PutObject
      #     Resource: arn:aws:s3:::cyngular-hotrod-bucket-026207525186/*
      #     Condition:
      #       ArnLike:
      #         AWS:SourceArn:
      #         - arn:aws:logs:*:781158784220:*
      #         - arn:aws:logs:*:026207525186:*
      #   - Sid: AWSLogDeliveryAclCheck
      #     Effect: Allow
      #     Principal:
      #       Service: delivery.logs.amazonaws.com
      #     Action:
      #     - s3:GetBucketAcl
      #     - s3:ListBucket
      #     Resource: arn:aws:s3:::cyngular-hotrod-bucket-026207525186
      #     Condition:
      #       ArnLike:
      #         aws:SourceArn:
      #         - arn:aws:logs:*:781158784220:*
      #         - arn:aws:logs:*:026207525186:*
      #   - Sid: Enable ACLs
      #     Effect: Allow
      #     Principal: "*"
      #     Action:
      #     - s3:PutBucketAcl
      #     - s3:GetBucketAcl
      #     Resource: arn:aws:s3:::cyngular-hotrod-bucket-026207525186

  #------------------------CustomResourceDeletionLambda------------------------------------
  DeleteCustomResourceLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "CloudFormationPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: '*'

  DeleteCustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: cyngular-lambda-delete-custom-resource
      Description: Created by Cyngular Security.
      Code:
        ZipFile: !Sub |
          import cfnresponse
          '''
          This function was created by cyngular security to delete a custom resource that is stuck
          on creation or deletion. Before running this function, make sure that the resource is actually stuck
          and not just taking time to complete (check the logs).
          If it truly is stuck, copy the event json from the logs and paste them below.
          Then run the function and confirm that the resource was successfully deleted.
          '''
          def lambda_handler(event, context):
            event = {} # copy and paste event from manager lambda logs to here
            cfnresponse.send(event, context, cfnresponse.FAILED, {'msg' : 'Custom resource manually deleted'})
      Runtime: "python3.9"
      Handler: index.cyngular_function
      Timeout: 300
      Role: !GetAtt DeleteCustomResourceLambdaRole.Arn

  # LambdaExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: LambdaCloudTrailPolicy
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - cloudtrail:DescribeTrails
  #                 - s3:ListBucket
  #               Resource: "*"

  # CheckCloudTrailFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Handler: index.handler
  #     Role: !GetAtt LambdaExecutionRole.Arn
  #     Code:
  #     Runtime: python3.8
  #     Timeout: 300

  # CheckCloudTrail:
  #   Type: Custom::CheckCloudTrail
  #   Properties:
  #     ServiceToken: !GetAtt CheckCloudTrailFunction.Arn

  # CloudTrailStack:
  #   Type: AWS::CloudFormation::Stack
  #   Condition: EnableCloudTrail
  #   Properties:
  #     TemplateURL: https://my-s3-bucket/path/to/cloudtrail-stack.yaml
  #     Parameters:
  #       S3BucketName: !Ref S3BucketName
  #       TrailExists: !GetAtt CheckCloudTrail.TrailExists

Outputs:
  DNSResourcesStatus:
    Description: Indicates whether DNS resources were created
    Value: !If [ CreateDNSResources, "DNS Resources Created", "DNS Resources Not Created" ]
  VPCFlowLogsStatus:
    Description: Indicates whether VPC Flow Logs were enabled
    Value: !If [ EnableVPCFlowLogs, "VPC Flow Logs Enabled", "VPC Flow Logs Not Enabled" ]
  GuardDutyStatus:
    Description: Indicates whether GuardDuty was enabled
    Value: !If [ EnableGuardDuty, "GuardDuty Enabled", "GuardDuty Not Enabled" ]
  CloudTrailStatus:
    Description: Indicates whether CloudTrail was enabled
    Value: !If [ EnableCloudTrail, "CloudTrail Enabled", "CloudTrail Not Enabled" ]

  # CloudTrailStatus:
  #   Description: Indicates whether CloudTrail was enabled
  #   Value: !If [ EnableCloudTrail, "CloudTrail Enabled", "CloudTrail Not Enabled" ]
  # ExistingTrailInfo:
  #   Description: Information about existing CloudTrail trail
  #   Value: !Sub "Trail exists: ${CheckCloudTrail.TrailExists}, Bucket: ${CheckCloudTrail.S3BucketName}"
