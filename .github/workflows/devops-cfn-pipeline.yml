name: DevOps CloudFormation Pipeline

on:
  push:
    branches: [ main, dev, staging ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DEVISION: "DevOps/AWS"
  ZIP_FILES_PATH: "./cloud-formation"
  LAYER_ZIP_FILE_NAME: "cyngular-onboarding.zip"
  LOCAL_RUNNER_SCRIPTS_PATH: "./Scripts/General"
  LOCAL_ARTIFACTS_PATH: "./artifacts"
  RUFF_OUTPUT_FILE: "ruff_output.xml"
  RUFF_FORMAT_OUTPUT_FILE: "ruff_format_output.txt"
  LAMBDA_DIRS_PATH: "./Lambdas"
  LAYER_ZIP_FILES_PATH: "./layers"

# Configure AWS OIDC authentication
permissions:
  id-token: write   # Required for requesting JWT
  contents: read    # Required for actions/checkout

jobs:
  get-scripts:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip unzip curl wget

      - name: Create artifacts directory
        run: mkdir -p ${{ env.LOCAL_ARTIFACTS_PATH }}

      - name: Set matrix for parallel jobs
        id: set-matrix
        run: |
          echo 'matrix={"lambda_dirs":["Lambdas/Services","Lambdas/Cleaners"]}' >> $GITHUB_OUTPUT

      - name: Cache scripts
        uses: actions/cache@v3
        with:
          path: Scripts/
          key: scripts-${{ github.sha }}

  security-scan:
    runs-on: ubuntu-latest
    needs: get-scripts
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Restore scripts cache
        uses: actions/cache@v3
        with:
          path: Scripts/
          key: scripts-${{ github.sha }}

      - name: Run credential scan
        run: |
          python ${{ env.LOCAL_RUNNER_SCRIPTS_PATH }}/ScanCreds.py

  lint-cloudformation:
    runs-on: ubuntu-latest
    needs: get-scripts
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python and cfn-lint
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install cfn-lint
        run: pip install cfn-lint

      - name: Restore scripts cache
        uses: actions/cache@v3
        with:
          path: Scripts/
          key: scripts-${{ github.sha }}

      - name: Lint CloudFormation templates
        run: |
          cfn-lint "${{ env.ZIP_FILES_PATH }}/**/*.yaml" || true

  lint-python-ruff:
    runs-on: ubuntu-latest
    needs: get-scripts
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install ruff
        run: pip install ruff

      - name: Restore scripts cache
        uses: actions/cache@v3
        with:
          path: Scripts/
          key: scripts-${{ github.sha }}

      - name: Run ruff check
        run: |
          ruff check . && echo "Ruff check passed" || echo "Ruff check failed"
          ruff format . --diff > ${{ env.RUFF_FORMAT_OUTPUT_FILE }}

      - name: Upload ruff artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ruff-format-output
          path: ${{ env.RUFF_FORMAT_OUTPUT_FILE }}

  lint-python-pylint:
    runs-on: ubuntu-latest
    needs: get-scripts
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pylint
        run: pip install pylint

      - name: Restore scripts cache
        uses: actions/cache@v3
        with:
          path: Scripts/
          key: scripts-${{ github.sha }}

      - name: Run pylint
        run: |
          pylint */*.py && echo "Pylint check passed" || echo "Pylint check failed"

  set-environment:
    runs-on: ubuntu-latest
    needs: [security-scan, lint-cloudformation, lint-python-ruff, lint-python-pylint]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore scripts cache
        uses: actions/cache@v3
        with:
          path: Scripts/
          key: scripts-${{ github.sha }}

      - name: Create artifacts directory
        run: mkdir -p ${{ env.LOCAL_ARTIFACTS_PATH }}

      - name: Set environment variables
        run: |
          bash ${{ env.LOCAL_RUNNER_SCRIPTS_PATH }}/SetEnv.sh

      - name: Upload environment variables
        uses: actions/upload-artifact@v4
        with:
          name: environment-vars
          path: ${{ env.LOCAL_ARTIFACTS_PATH }}/vars.env

  package-lambda-layer:
    runs-on: ubuntu-latest
    needs: set-environment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Restore scripts cache
        uses: actions/cache@v3
        with:
          path: Scripts/
          key: scripts-${{ github.sha }}

      - name: Create layer directory
        run: mkdir -p ${{ env.LAYER_ZIP_FILES_PATH }}

      - name: Package AWS Lambda layer
        run: |
          bash ${{ env.LOCAL_RUNNER_SCRIPTS_PATH }}/../DevOps/AWS/PackageLayerAWS.sh

      - name: Upload lambda layer
        uses: actions/upload-artifact@v4
        with:
          name: lambda-layer
          path: ${{ env.LAYER_ZIP_FILES_PATH }}/${{ env.LAYER_ZIP_FILE_NAME }}

  zip-lambda-functions:
    runs-on: ubuntu-latest
    needs: set-environment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore scripts cache
        uses: actions/cache@v3
        with:
          path: Scripts/
          key: scripts-${{ github.sha }}

      - name: Download environment variables
        uses: actions/download-artifact@v4
        with:
          name: environment-vars
          path: ${{ env.LOCAL_ARTIFACTS_PATH }}

      - name: Create lambda directories
        run: mkdir -p ${{ env.LAMBDA_DIRS_PATH }}

      - name: Zip lambda directories
        run: |
          source ${{ env.LOCAL_ARTIFACTS_PATH }}/vars.env || true
          bash ${{ env.LOCAL_RUNNER_SCRIPTS_PATH }}/ZipDirs.sh

      - name: Upload lambda zips
        uses: actions/upload-artifact@v4
        with:
          name: lambda-zips
          path: ${{ env.LAMBDA_DIRS_PATH }}/${{ env.ZIP_FILES_PATH }}/*.zip
          retention-days: 1

  sync-to-s3:
    runs-on: ubuntu-latest
    needs: [package-lambda-layer, zip-lambda-functions]
    continue-on-error: true
    strategy:
      matrix:
        lambda_dirs: ["Lambdas/Services", "Lambdas/Cleaners"]
    env:
      DEVISION_REF: "devops"
      LAMBDA_DIRS_PATH: ${{ matrix.lambda_dirs }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEVOPS_ROLE_ARN }}
          role-session-name: GitHubActions-DevOpsPipeline-${{ github.run_id }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}
          role-duration-seconds: 3600

      - name: Restore scripts cache
        uses: actions/cache@v3
        with:
          path: Scripts/
          key: scripts-${{ github.sha }}

      - name: Download environment variables
        uses: actions/download-artifact@v4
        with:
          name: environment-vars
          path: ${{ env.LOCAL_ARTIFACTS_PATH }}

      - name: Download lambda zips
        uses: actions/download-artifact@v4
        with:
          name: lambda-zips
          path: ${{ env.LAMBDA_DIRS_PATH }}/${{ env.ZIP_FILES_PATH }}

      - name: Download lambda layer
        uses: actions/download-artifact@v4
        with:
          name: lambda-layer
          path: ${{ env.LAYER_ZIP_FILES_PATH }}

      - name: Setup AWS authentication for DevOps
        run: |
          source ${{ env.LOCAL_ARTIFACTS_PATH }}/vars.env || true
          bash ${{ env.LOCAL_RUNNER_SCRIPTS_PATH }}/GetAuthAWSDevops.sh

      - name: Sync to S3
        run: |
          source ${{ env.LOCAL_ARTIFACTS_PATH }}/vars.env || true
          bash ${{ env.LOCAL_RUNNER_SCRIPTS_PATH }}/SyncS3.sh

  # Notification job to summarize results
  pipeline-summary:
    runs-on: ubuntu-latest
    needs: [sync-to-s3]
    if: always()
    steps:
      - name: Pipeline Summary
        run: |
          echo "ðŸš€ DevOps CloudFormation Pipeline Completed"
          echo "âœ… Security scan: ${{ needs.security-scan.result }}"
          echo "âœ… CloudFormation lint: ${{ needs.lint-cloudformation.result }}"
          echo "âœ… Python linting (ruff): ${{ needs.lint-python-ruff.result }}"
          echo "âœ… Python linting (pylint): ${{ needs.lint-python-pylint.result }}"
          echo "âœ… Lambda layer packaging: ${{ needs.package-lambda-layer.result }}"
          echo "âœ… Lambda function zipping: ${{ needs.zip-lambda-functions.result }}"
          echo "âœ… S3 sync: ${{ needs.sync-to-s3.result }}"