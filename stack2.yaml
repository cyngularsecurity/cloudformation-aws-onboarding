AWSTemplateFormatVersion: "2010-09-09"
Description: Stackset for multiple route53 resolvers and guardduty detectors

Parameters:
  ClientName:
    Type: String
    Description: The name of the client
  deployRegions:
    Type: CommaDelimitedList
    Description: The regions in which the client operates (use ,)
  S3ManagementBucketArn:
    Description: The Arn of the created S3 bucket.
    Type: String
  CyngularAccountId:
    Description: The cyngular account id
    Type: String
  
  
Resources:
  StackSet:
    Type: AWS::CloudFormation::StackSet
    Properties:
      Description: Multiple route53 resolvers and guardduty detectors in multiple regions
      PermissionModel: SELF_MANAGED
      Capabilities: ['CAPABILITY_IAM']
      OperationPreferences:
        MaxConcurrentPercentage: 100
        RegionConcurrencyType: "PARALLEL"
      # AutoDeployment: 
      #   Enabled: False
      Parameters:
        - ParameterKey: ClientName
          ParameterValue: !Ref ClientName
        - ParameterKey: S3ManagementBucketArn
          ParameterValue: !Ref S3ManagementBucketArn
        - ParameterKey: CyngularAccountId
          ParameterValue: !Ref CyngularAccountId
        - ParameterKey: deployRegions
          ParameterValue: !Join [",", !Ref deployRegions]

      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref "AWS::AccountId"
          Regions: !Ref deployRegions
            
      StackSetName: !Sub "cyngular-stack-${ClientName}"
      TemplateBody: !Sub |
        AWSTemplateFormatVersion: 2010-09-09
        Description: Create a guardduty detector and route53 resolver
        Parameters:
          ClientName:
            Type: String
          deployRegions:
            Type: CommaDelimitedList
          S3ManagementBucketArn:
            Type: String
          CyngularAccountId:
            Description: The cyngular account id
            Type: String
        Resources:
          #-----------------------GuarddutyLambdaRole----------------------------#
          GuarddutyLambdaRole:
            Type: "AWS::IAM::Role"
            Properties:
              AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal:
                      Service:
                        - "lambda.amazonaws.com"
                    Action:
                      - "sts:AssumeRole"
              Policies:
                - PolicyName: "CloudFormationPolicy"
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: "Allow"
                        Action:
                          - "logs:*"
                          - "guardduty:TagResource"
                          - "guardduty:ListDetectors"
                          - "guardduty:CreateDetector"
                          - "guardduty:DeleteDetector"
                          - "guardduty:ListTagsForResource"
                        Resource:
                          - "*"
          #---------------------GuarddutyCreation--------------------
          CyngularGuarddutyCreationLambda:
            DependsOn: GuarddutyLambdaRole
            Type: AWS::Lambda::Function
            Properties:
              FunctionName: cyngular-guardduty-creation-lambda-function
              Description: Created by Cyngular Security.
              Code:
                ZipFile: !Sub |
                    import boto3
                    import time
                    import os
                    import cfnresponse
                    import logging
                    def guardduty_exists(region):
                        client = boto3.client('guardduty', region)
                        response = client.list_detectors()
                        if len(response['DetectorIds']) == 0:
                            return False
                        return True
                    def create_guardduty():
                        deployRegionsList = os.environ['deployRegions'].split(',')
                        for region in deployRegionsList:
                            if guardduty_exists(region):
                                logging.info(f'guardduty found in {region}, adding cyngular tag')
                                client = boto3.client('guardduty', region)
                                response = client.list_detectors()
                                detector_id = response['DetectorIds'][0]
                                # add cyngular tag
                                response = client.tag_resource(Tags={'Value' : 'cyngular-guardduty'}, ResourceArn=f'arn:aws:guardduty:{region}:026207525186:detector/{detector_id}')
                            
                            else:
                                logging.info(f'creating guardduty in {region}')
                                # create guard duties
                                for region in deployRegionsList:
                                    client = boto3.client('guardduty', region)
                                    detector_properties = {
                                        'Enable': True,
                                        'FindingPublishingFrequency': 'FIFTEEN_MINUTES',
                                        'DataSources': {
                                            'S3Logs': {
                                                'Enable': True
                                            },
                                            
                                            # 'Kubernetes': {
                                            #     'AuditLogs': {
                                            #         'Enable': True
                                            #     }
                                            # }
                                            
                                        },
                                        'Tags': [
                                            {
                                                'Value': 'cyngular-guardduty'
                                            }
                                        ]
                                    }
                                    
                                    # Create the detector
                                    response = client.create_detector(
                                        Enable=True,
                                        FindingPublishingFrequency='FIFTEEN_MINUTES',
                                        DataSources=detector_properties['DataSources'],
                                        Tags=detector_properties['Tags'][0]
                                    )
                    def cyngular_function(event, context):
                      if event['RequestType'] == 'Create':
                        try:
                          create_guardduty()
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, {'msg' : 'Finished creating guarduties done'})
                        except Exception as e:
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, {'msg' : str(e)})
                      else:
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, {'msg' : 'skipping'})

              Runtime: "python3.9"
              Handler: index.cyngular_function
              Timeout: 300
              Environment:
                Variables:
                    deployRegions: !Join [",", !Ref deployRegions]
            
              Role: !GetAtt GuarddutyLambdaRole.Arn

          GuarddutyCreationTrigger:
            Type: AWS::CloudFormation::CustomResource
            Version: "1.0"
            Properties:
              ServiceToken: !GetAtt CyngularGuarddutyCreationLambda.Arn
          
          # #-----------------------GuarddutyDeletionLambda--------------------------
          # CyngularGuarddutyDeletionLambda:
          #   DependsOn: GuarddutyLambdaRole
          #   Type: AWS::Lambda::Function
          #   Properties:
          #     FunctionName: cyngular-guardduty-deletion-lambda-function
          #     Description: Created by Cyngular Security.
          #     Code:
          #       ZipFile: !Sub |
          #           import boto3
          #           import time
          #           import os
          #           import cfnresponse
          #           import logging

          #           def cyngular_function(event, context): 
          #               logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
          #               logger = logging.getLogger()
          #               logger.setLevel(logging.INFO)
          #               #if the stack is deleted
          #               if event['RequestType'] == 'Delete':
          #                   logging.info('deleting cyngular guardduties')
          #                   try:
          #                       deployRegionsList = os.environ['deployRegions'].split(',')
          #                       for region in deployRegionsList:
          #                           client = boto3.client('guardduty', region)
          #                           response = client.list_detectors()
          #                           if len(response['DetectorIds']) != 0:
          #                               for DetectorId in response['DetectorIds']:
          #                                   DetectorArn=f'arn:aws:guardduty:{region}:026207525186:detector/{DetectorId}'
          #                                   response = client.list_tags_for_resource(ResourceArn=DetectorArn)
          #                                   if 'Tags' in response:
          #                                       tags = response['Tags']
          #                                       for tag_key, value in tags.items():
          #                                           if value == 'cyngular-guardduty':
          #                                               response = client.delete_detector(DetectorId=DetectorId)
          #                   except Exception as e:
          #                       logging.critical(e)
          #                       cfnresponse.send(event, context, cfnresponse.FAILED, {'msg' : str(e)})
          #               cfnresponse.send(event, context, cfnresponse.SUCCESS, {'msg' : 'Finished deleting guarduties done'})

          #     Runtime: "python3.9"
          #     Handler: index.cyngular_function
          #     Timeout: 300
          #     Environment:
          #       Variables:
          #           deployRegions: !Ref deployRegions
            
          #     Role: !GetAtt GuarddutyLambdaRole.Arn

          # GuarddutyDeletion:
          #   Type: AWS::CloudFormation::CustomResource
          #   Version: "1.0"
          #   Properties:
          #     ServiceToken: !GetAtt CyngularGuarddutyDeletionLambda.Arn

          # CyngularGuardDuty:
          #   Type: AWS::GuardDuty::Detector
          #   Properties: 
          #     DataSources: 
          #         Kubernetes:
          #           AuditLogs:
          #             Enable: True
          #         S3Logs:
          #           Enable: True
          #     Enable: True
          #     FindingPublishingFrequency: FIFTEEN_MINUTES
          #     Tags: 
          #         - Key: Name
          #           Value: cyngular-guardduty
          #------------------Cyngular KMS Key-------------------
          CyngularKmsKey:
            Type: AWS::KMS::Key
            Properties: 
              Description: cyngular_kms_key
              KeyPolicy: {
                "Id" : "key-consolepolicy-3",
                "Version" : "2012-10-17",
                "Statement" : [
                    {
                        "Sid" : "Enable IAM User Permissions",
                        "Effect" : "Allow",
                        "Principal" : {
                            "AWS": [
                                !Join [ '', ['arn:aws:iam::', !Ref CyngularAccountId, ':root']],
                                !Join [ '', ['arn:aws:iam::', !Ref AWS::AccountId, ':root']] 
                            ]
                        },
                        "Action" : "kms:*",
                        "Resource" : "*"
                    }
                ]
            }
              Tags: 
                - Key: Name
                  Value: cyngular-kms-key
          
          CyngularKmsAlias:
            DependsOn: CyngularKmsKey
            Type: AWS::KMS::Alias
            Properties: 
                AliasName: alias/cyngular-kms-key
                TargetKeyId: !GetAtt  CyngularKmsKey.Arn
          CyngularResolver:
            # DeletionPolicy: Retain
            Type: AWS::Route53Resolver::ResolverQueryLoggingConfig
            Properties: 
              DestinationArn: !Ref S3ManagementBucketArn
              Name: cyngular_dns
          # CyngularResolverAssociation:
          #   Type: AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation
          #   Properties: 
          #     ResolverQueryLogConfigId: !GetAtt CyngularResolver.Id
          #     ResourceId: !Ref VpcId