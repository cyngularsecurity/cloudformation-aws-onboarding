AWSTemplateFormatVersion: 2010-09-09
Transform:
  - 'AWS::LanguageExtensions'

Description: |-
  Cyngular Core Infrastructure Template
  Creates: S3 bucket (cyngular-{client}-bucket-{account}), S3 bucket policy (CloudTrail/Cyngular access), 
  IAM role policy (readonly S3 access), CloudTrail trail (conditional audit logging),
  Lambda layer (shared utilities), Bucket Policy Manager (S3 policy updates)

Metadata:
  Vendor:
    Description: 'Cyngular Security'

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Client Info'
        Parameters:
          - ClientName
      - Label:
          default: 'Override Parameters'
        Parameters:
          - EnableCloudTrail
          - EnableBucketPolicyManager
          - OrganizationId
          - CyngularAccountId

Mappings:
  Const:
    'Cyngular':
      LambdasBucketPrefix: 'cyngular-onboarding'
      PythonRuntime: 'python3.12'
      DeletionPolicy: 'Retain'
      SSEAlgorithm: 'AES256'
      LifecycleStandardIADays: 60
      LifecycleGlacierDays: 90
      LifecycleExpirationDays: 365
      LayerName: 'cyngular-onboarding-layer'
      CodeVersion: 'latest'

Parameters:
  ClientName:
    Description: 'The Client Company name (must be lowercase, can contain letters & numbers)'
    Type: String
    AllowedPattern: '^[a-z0-9]+$'
    ConstraintDescription: 'Company Name should consist of only lowercase characters and numbers, and it should not start with a number.'
    MinLength: 3
    MaxLength: 15

  OrganizationId:
    Description: 'Specify the Company Organization id | leave empty if not deploying to an organization'
    Type: String
    # Default: ''

  CyngularAccountId:
    Description: 'The Cyngular Account ID to assume the read only role'
    Type: String
    Default: '851565895544'

  EnableCloudTrail:
    Description: 'Create Cyngular Trail | set to false to disable'
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'true'

  EnableBucketPolicyManager:
    Description: 'Set to true to enable the bucket policy manager for future logging; set to false if not currently desired.'
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'true'

  Environment:
    Description: 'Environment designation - set to "dev" for development ref, otherwise leave empty'
    Type: String
    Default: ''

Conditions:
  IsOrg: !Not [!Equals [!Ref OrganizationId, '']]
  CreateCloudTrail: !Equals [ !Ref EnableCloudTrail, 'true' ]
  CreateBucketPolicyManager: !Equals [ !Ref EnableBucketPolicyManager, 'true' ]
  IsDevEnvironment: !Equals [!Ref Environment, 'dev']

Resources:
  ################################################################################
  # STORAGE - S3 Bucket for Security Logs Collection
  ################################################################################
  CyngularS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: !FindInMap [Const, Cyngular, DeletionPolicy]
    UpdateReplacePolicy: !FindInMap [Const, Cyngular, DeletionPolicy]
    Properties:
      BucketName: !Sub "cyngular-${ClientName}-bucket-${AWS::AccountId}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: !FindInMap [Const, Cyngular, SSEAlgorithm]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

      LifecycleConfiguration:
        Rules:
        ## transitions objects to Standard-IA after 60 days
        ## Glacier after 90 days
        ## deletes them after a year
          - Id: ObjectLifecycleRule
            Status: Enabled
            Transitions:
              - TransitionInDays: !FindInMap [Const, Cyngular, LifecycleStandardIADays]
                StorageClass: STANDARD_IA
              - TransitionInDays: !FindInMap [Const, Cyngular, LifecycleGlacierDays]
                StorageClass: GLACIER
            ExpirationInDays: !FindInMap [Const, Cyngular, LifecycleExpirationDays]

      Tags:
        - Key: Name
          Value: !Sub "cyngular-${ClientName}-bucket-${AWS::AccountId}"
        - Key: cyngular-os
          Value: true
        - Key: cyngular-visibility
          Value: true
        - Key: ClientName
          Value: !Ref ClientName
        - !If
            - CreateCloudTrail
            - Key: cyngular-cloudtrail
              Value: 'true'
            - !Ref AWS::NoValue

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CyngularS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'LambdaRead'
            Effect: Allow
            Principal:
              AWS: # TODO - validate & decide
                - !Sub "arn:aws:iam::${CyngularAccountId}:role/${ClientName}-lambda-role" ## drop for client-side readonly role
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
                # - !Sub "arn:aws:iam::${CyngularAccountId}:root"
            Action:
              - "s3:*"
            Resource:
              - !GetAtt CyngularS3Bucket.Arn
              - !Sub "arn:aws:s3:::${CyngularS3Bucket}/*"
            # Condition:
            #   StringEquals:
            #     aws:PrincipalArn:
            #       - !Sub "arn:aws:iam::${CyngularAccountId}:role/${ClientName}-lambda-role"
            #       - !Sub "arn:aws:iam::${CyngularAccountId}:role/${ClientName}-*-exec-role"

          - !If
            - CreateCloudTrail
            - Sid: 'CloudTrailAclCheck'
              Effect: Allow
              Principal:
                Service: "cloudtrail.amazonaws.com"
              Action: 's3:GetBucketAcl'
              Resource: !GetAtt CyngularS3Bucket.Arn
              Condition:
                StringEquals:
                  AWS:SourceArn: !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/cyngular-cloudtrail"
            - !Ref "AWS::NoValue"
          - !If 
            - CreateCloudTrail
            - Sid: 'CloudTrailWrite'
              Effect: Allow
              Principal: 
                Service: "cloudtrail.amazonaws.com"
              Action: 
                - 's3:PutObject'
              Resource: 
                - !Sub "arn:aws:s3:::${CyngularS3Bucket}/AWSLogs/${AWS::AccountId}/*"
                - !If 
                  - IsOrg
                  - !Sub "arn:aws:s3:::${CyngularS3Bucket}/AWSLogs/${OrganizationId}/*"
                  - !Ref "AWS::NoValue"
              Condition:
                StringEquals:
                  s3:x-amz-acl: "bucket-owner-full-control"
                  AWS:SourceArn: !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/cyngular-cloudtrail"
            - !Ref "AWS::NoValue"

  ##############################
  # Cyngular Bucket Access Policy
  ##############################
  CyngularBucketAccessPolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: !Sub "cyngular-bucket-access-policy-${ClientName}"
      RoleName:
        Fn::ImportValue:
          !Join [ ":", ["CyngularSecurity", "ReadonlyRoleName", !Ref ClientName ]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "CyngularBucketAdmin"
            Effect: Allow
            Resource:
              - !GetAtt CyngularS3Bucket.Arn
              - !Sub "arn:aws:s3:::${CyngularS3Bucket}/*"
            Action:
              - "s3:*"

  ##############################
  # Cyngular CloudTrail
  ##############################
  ClientCloudTrail:
    DependsOn: S3BucketPolicy
    Condition: CreateCloudTrail
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: cyngular-cloudtrail
      S3BucketName: !Ref CyngularS3Bucket
      InsightSelectors:
        - InsightType: ApiCallRateInsight
        - InsightType: ApiErrorRateInsight
      EventSelectors:
        - IncludeManagementEvents: true
          ExcludeManagementEventSources:
            - kms.amazonaws.com
          DataResources:
            - Type: AWS::Lambda::Function
              Values:
                - arn:aws:lambda
      IsLogging: true
      IsMultiRegionTrail: true
      IsOrganizationTrail: !If [IsOrg, true, false]
      IncludeGlobalServiceEvents: true
      Tags:
        - Key: Name
          Value: cyngular-cloudtrail
        - Key: ClientName
          Value: !Ref ClientName

  ##############################
  # Cyngular Layer
  ##############################
  CyngularLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !FindInMap [Const, Cyngular, LayerName]
      Description: "Shared utilities and dependencies for Cyngular OnBoarding Lambda functions"
      Content:
        S3Bucket: !Sub
          - "${bucket_prefix}${bucket_name}-${AWS::Region}"
          - bucket_prefix: !If [IsDevEnvironment, 'dev-', '']
            bucket_name: !FindInMap [Const, Cyngular, LambdasBucketPrefix]
        S3Key: !Sub
          - "layers/${code_version}/cyngular-onboarding.zip"
          - code_version: !FindInMap [Const, Cyngular, CodeVersion]
      CompatibleRuntimes: [!FindInMap [Const, Cyngular, PythonRuntime]]
      CompatibleArchitectures:
        - x86_64
        # - arm64

  CyngularLayerPermission:
    Type: AWS::Lambda::LayerVersionPermission
    Properties:
      Action: lambda:GetLayerVersion
      LayerVersionArn: !Ref CyngularLayer
      OrganizationId: !Ref OrganizationId
      Principal: "*"

  ##############################
  # Cyngular Bucket Policy Manager
  ##############################
  CyngularBucketPolicyManagerRole:
    Type: AWS::IAM::Role
    Condition: CreateBucketPolicyManager
    Properties:
      RoleName: !Sub "cyngular-bucket-policy-manager-role-${ClientName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Tags:
        - Key: Vendor
          Value: "Cyngular Security"
        - Key: ClientName
          Value: !Ref ClientName

  CyngularBucketPolicyManagerRolePolicy:
    Type: AWS::IAM::RolePolicy
    Condition: CreateBucketPolicyManager
    Properties:
      PolicyName: !Sub "cyngular-bucket-policy-manager-policy-${ClientName}"
      RoleName: !Ref CyngularBucketPolicyManagerRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "CyngularLambdaUpdateBucketPolicy"
            Effect: Allow
            Resource: "*"
            Action:
              # - "logs:*"
              - "organizations:ListAccounts"

          - Sid: "CyngularBucketAdmin"
            Effect: Allow
            Resource:
              - !Sub
                - "arn:aws:s3:::${bucket_name}"
                - bucket_name: !Ref CyngularS3Bucket
              - !Sub
                - "arn:aws:s3:::${bucket_name}/*"
                - bucket_name: !Ref CyngularS3Bucket
            Action:
              - "s3:GetBucketPolicy"
              - "s3:PutBucketPolicy"              

  CyngularBucketPolicyManagerLambda:
    Type: AWS::Lambda::Function
    Condition: CreateBucketPolicyManager
    Properties:
      FunctionName: !Sub "cyngular-bucket-policy-manager-${ClientName}"
      Description: "Created by Cyngular Security | Updates the Cyngular S3 bucket policy"
      Role: !GetAtt CyngularBucketPolicyManagerRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref CyngularS3Bucket
          IS_ORG: !If [IsOrg, true, false]

      Runtime: !FindInMap [Const, Cyngular, PythonRuntime]
      Handler: lambda_function.lambda_handler
      Timeout: 900
      Layers: [!Ref CyngularLayer]
      Code:
        S3Bucket: !Sub
          - "${bucket_prefix}${bucket_name}-${AWS::Region}"
          - bucket_prefix: !If [IsDevEnvironment, 'dev-', '']
            bucket_name: !FindInMap [Const, Cyngular, LambdasBucketPrefix]
        S3Key: !Sub
          - "lambdas/services/${code_version}/UpdateBucketPolicy.zip"
          - code_version: !FindInMap [Const, Cyngular, CodeVersion]
      Tags:
        - Key: Name
          Value: !Sub "cyngular-update-bucket-policy-${ClientName}"
        - Key: Vendor
          Value: "Cyngular Security"
        - Key: ClientName
          Value: !Ref ClientName

  CyngularBucketPolicyManagerTrigger:
    Type: Custom::UpdateBucketPolicy
    Condition: CreateBucketPolicyManager
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt CyngularBucketPolicyManagerLambda.Arn
      ServiceTimeout: 1200

  CyngularBucketPolicyManagerScheduledRule:
    Type: AWS::Events::Rule
    Condition: CreateBucketPolicyManager
    Properties:
      Name: !Sub "${CyngularBucketPolicyManagerLambda}-rule"
      Description: "Scheduled execution for Update Bucket Policy | Runs daily at 00:00"
      ScheduleExpression: "cron(0 0 * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt CyngularBucketPolicyManagerLambda.Arn
          Id: "UpdateBucketPolicyTarget"

  CyngularBucketPolicyManagerScheduledRulePermission:
    Type: AWS::Lambda::Permission
    Condition: CreateBucketPolicyManager
    Properties:
      FunctionName: !Ref CyngularBucketPolicyManagerLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CyngularBucketPolicyManagerScheduledRule.Arn

##############################
# Outputs
##############################
Outputs:
  CyngularBucketName:
    Description: "Name of the Cyngular S3 bucket"
    Value: !Ref CyngularS3Bucket
    Export:
      Name: !Join [ ":", ["CyngularSecurity", "CyngularSecurityBucketName", !Ref ClientName ]]

  IsOrganization:
    Description: Whether this is an organization deployment
    Value: !If [IsOrg, "true", "false"]
    Export:
      Name: !Join [ ":", ["CyngularSecurity", "IsOrganization", !Ref ClientName ] ]
