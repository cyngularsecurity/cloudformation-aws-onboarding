AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Cyngular Gen3 OnBoarding stack template with managed StackSet

Metadata:
  Vendor:
    Description: Cyngular Security

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Client Info"
        Parameters:
          - ClientName
          - OrganizationId
      - Label:
          default: "Services"
        Parameters:
          - CloudTrailBucket
          - EnableVPCFlowLogs
          - EnableDNS
          - EnableEKS
      - Label:
          default: "Cyngular Info"
        Parameters:
          - CyngularAccountId

    ParameterLabels:
      ClientName:
        default: "Company Name"
      OrganizationId:
        default: "Organization Id"
      CloudTrailBucket:
        default: "CloudTrail Bucket Name"
      EnableVPCFlowLogs:
        default: "VPCFlowLogs Enabled"
      EnableDNS:
        default: "DNS Enabled"
      EnableEKS:
        default: "EKS Enabled"
      CyngularAccountId:
        default: "Cyngular Account Id"

Mappings:
  VARS:
    "Cyngular":
      TemplateBucket: "cyngular-onboarding-templates"
      TemplatePath: "stacks/Gen3"
      LambdasBucketPrefix: "cyngular-onboarding"
      ExecRoleTemplateName: "CyngularCloudFormationStackSetExecutionRole"
      AdminRoleTemplateName: "CyngularCloudFormationStackSetAdministrationRole"

Parameters:
  ClientName:
    Description: "The Client Company name (must be lowercase, can contain letters or numbers)"
    Type: String
    AllowedPattern: "^[a-z0-9]+$"
    ConstraintDescription: "Company Name should consist of only lowercase characters and numbers, and it should not start with a number."
    MinLength: 3
    MaxLength: 15

  OrganizationId:
    Description: "Specify the Company Organization id | leave empty if not deploying to an organization"
    Type: String
    Default: ""

  CyngularAccountId:
    Description: "The Cyngular Account ID to assume the read only role [851565895544]"
    Type: String
    Default: "851565895544"

  CloudTrailBucket:
    Description: "Enter a bucket Name, if you already configured CloudTrail To Send Logs to an S3 bucket. if so, also add the tag {key: 'cyngular-cloudtrail', value: 'true'} to the bucket, otherwise leave empty."
    Type: String
    Default: ""

  EnableDNS:
    Description: "Set to 'true' to enable the service if not already enabled; set to 'false' if the service is enabled or not desired. Add the tag {key: 'cyngular-dnslogs', value: 'true'} to the resource bucket only if telemetry is already collected for Cyngular analysis."
    Type: String
    AllowedValues: ["true", "false"]
    Default: "true"

  EnableEKS:
    Description: "EKS Service - Whether to Configure EKS Audit & Authenticator Logging for kubernetes Clusters."
    Type: String
    AllowedValues: ["true", "false"]
    Default: "true"

  EnableVPCFlowLogs:
    Description: "Set to 'true' to enable the service if not already enabled; set to 'false' if the service is enabled or not desired. Add the tag {key: 'cyngular-vpcflowlogs', value: 'true'} to the resource bucket only if telemetry is already collected for Cyngular analysis."
    Type: String
    AllowedValues: ["true", "false"]
    Default: "true"

  ServiceManagerOverride:
    Description: "change to override (retrigger) the 'Service Manager' Lambda Trigger"
    Type: Number
    Default: 1

  AdminAndExecOverride:
    Description: "change to override (retrigger) the 'Admin and Execution' Lambda Trigger"
    Type: Number
    Default: 1

Conditions:
  IsOrg: !Not [!Equals [!Ref OrganizationId, ""]]
  CreateCloudTrail: !Equals [ !Ref CloudTrailBucket, "" ]
  ServiceVFL: !Equals [ !Ref EnableVPCFlowLogs, "true" ]
  ServiceDNS: !Equals [ !Ref EnableDNS, "true" ]
  ServiceEKS: !Equals [ !Ref EnableEKS, "true" ]

Resources:
  CyngularS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "cyngular-${ClientName}-bucket-${AWS::AccountId}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub "cyngular-${ClientName}-bucket-${AWS::AccountId}"
        - Key: cyngular-os
          Value: true
        - Key: cyngular-visibility
          Value: true
        - !If
            - CreateCloudTrail
            - Key: cyngular-cloudtrail
              Value: true
            - !Ref AWS::NoValue
        - !If
            - ServiceDNS
            - Key: cyngular-dnslogs
              Value: true
            - !Ref AWS::NoValue
        - !If
            - ServiceVFL
            - Key: cyngular-vpcflowlogs
              Value: true
            - !Ref AWS::NoValue
        - !If
            - ServiceEKS
            - Key: cyngular-ekslogs
              Value: true
            - !Ref AWS::NoValue

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CyngularS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'LambdaRead'
            Effect: Allow
            Principal:
              AWS: [
                !Sub "arn:aws:iam::${AWS::AccountId}:root",
                !Sub "arn:aws:iam::${CyngularAccountId}:root"                
              ]
            Action:
              - "s3:*"
            Resource:
              - !GetAtt CyngularS3Bucket.Arn
              - !Sub "arn:aws:s3:::${CyngularS3Bucket}/*"
          - !If
            - CreateCloudTrail
            - Sid: 'CloudTrailAclCheck'
              Effect: Allow
              Principal:
                Service: "cloudtrail.amazonaws.com"
              Action: 's3:GetBucketAcl'
              Resource: !GetAtt CyngularS3Bucket.Arn
              Condition:
                StringEquals:
                  AWS:SourceArn: !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/cyngular-cloudtrail"
            - !Ref "AWS::NoValue"
          - !If 
            - CreateCloudTrail
            - Sid: 'CloudTrailWrite'
              Effect: Allow
              Principal: 
                Service: "cloudtrail.amazonaws.com"
              Action: 
                - 's3:PutObject'
              Resource: 
                - !Sub "arn:aws:s3:::${CyngularS3Bucket}/AWSLogs/${AWS::AccountId}/*"
                - !If 
                  - IsOrg
                  - !Sub "arn:aws:s3:::${CyngularS3Bucket}/AWSLogs/${OrganizationId}/*"
                  - !Ref "AWS::NoValue"
              Condition:
                StringEquals:
                  s3:x-amz-acl: "bucket-owner-full-control"
                  AWS:SourceArn: !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/cyngular-cloudtrail"
            - !Ref "AWS::NoValue"

  ClientCloudTrail:
    DependsOn: S3BucketPolicy
    Condition: CreateCloudTrail
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: cyngular-cloudtrail
      S3BucketName: !Ref CyngularS3Bucket
      InsightSelectors:
        - InsightType: ApiCallRateInsight
        - InsightType: ApiErrorRateInsight
      EventSelectors:
        - IncludeManagementEvents: true
          ExcludeManagementEventSources:
            - kms.amazonaws.com
          DataResources:
            - Type: AWS::Lambda::Function
              Values:
                - arn:aws:lambda
      IsLogging: true
      IsMultiRegionTrail: true
      IsOrganizationTrail: !If [IsOrg, true, false]
      IncludeGlobalServiceEvents: true
      Tags:
        - Key: Name
          Value: cyngular-cloudtrail

  ClientCyngularRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cyngular-readonly-role-${ClientName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${CyngularAccountId}:root"
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub "cyngular-readonly-policy-${ClientName}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'ReadOnly'
                Effect: Allow
                Resource: '*'
                Action:
                  - "iam:List*"
                  - "iam:Get*"
                  - "iam:Generate*"
                  - "organizations:Describe*"
                  - "organizations:List*"
                  - "tag:GetResources"
                  - "access-analyzer:ValidatePolicy"
                  - "access-analyzer:ListPolicyGenerations"
                  - "ce:List*"
                  - "ce:Get*"
                  - "ce:Describe*"
                  - "s3:List*"
                  - "s3:Describe*"
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
                  - "s3:GetBucketPolicy"
                  - "s3:GetBucketPolicyStatus"
                  - "s3:GetEncryptionConfiguration"
                  - "s3:GetBucketOwnershipControls"
                  - "s3:GetBucketTagging"
                  - "s3:GetIntelligentTieringConfiguration"
                  - "s3:GetAccountPublicAccessBlock"
                  - "s3:GetBucketPublicAccessBlock"
                  - "logs:List*"
                  - "logs:Describe*"
                  - "logs:Get*"
                  - "logs:FilterLogEvents"
                  - "logs:StartQuery"
                  - "cloudwatch:GetMetricStatistics"
                  - "ec2:List*"
                  - "ec2:CreateTags"
                  - "ec2:Describe*"
                  - "ec2:GetImageBlockPublicAccessState"
                  - "ecr:Describe*"
                  - "ecr:List*"
                  - "eks:Describe*"
                  - "eks:List*"
                  - "ecs:List*"
                  - "ecs:Describe*"
                  - "lambda:List*"
                  - "lambda:Get*"
                  - "rds:List*"
                  - "rds:Describe*"
                  - "cloudformation:Describe*"
                  - "cloudformation:List*"
                  - "cloudformation:Get*"
                  - "route53:Get*"
                  - "route53:List*"
                  - "route53:TestDNSAnswer"
                  - "cloudtrail:GetTrail"
                  - "cloudtrail:DescribeTrails"
                  - "cloudtrail:GetTrailStatus"
                  - "cloudtrail:LookupEvents"
                  - "cloudtrail:ListTags"
                  - "cloudtrail:ListTrails"
                  - "cloudtrail:GetEventSelectors"
                  - "cloudtrail:GetInsightSelectors"
                  - "kms:Describe*"
                  - "kms:Get*"
                  - "kms:List*"
                  - "kms:Encrypt"
                  - "kms:ReEncrypt*"
                  - "kms:Decrypt"
                  - "kms:CreateGrant"
                  - "events:ListRules"
                  - "events:ListTargetsByRule"
                  - "events:ListEventBuses"
                  - "events:DescribeEventBus"
                  - "events:DescribeRule"
                  - "events:TestEventPattern"
                  - "events:PutRule"
                  - "events:PutTargets"
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:GetMetricData"
                  - "account:ListRegions"
              - Sid: "Ec2CyngularSnapshot"
                Effect: Allow
                Action:
                  - "ec2:DeleteSnapshot"
                  - "ec2:ModifySnapshotAttribute"
                Resource: "*"
                Condition:
                  StringLike:
                    aws:ResourceTag/Name: cyngular*
              - Sid: "Ec2CreateSnapshot"
                Effect: Allow
                Resource: "*"
                Action:
                  - "ec2:CopySnapshot"
                  - "ec2:CreateSnapshot"
                  - "ec2:CreateSnapshots"
              - Sid: "CyngularBucketAdmin"
                Effect: Allow
                Resource:
                  - !GetAtt CyngularS3Bucket.Arn
                  - !Sub ["${bucket_arn}/*", bucket_arn: !GetAtt CyngularS3Bucket.Arn]
                Action:
                  - "s3:*"
              - Sid: "CyngularKmsKey"
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:kms:*:${CyngularAccountId}:alias/*${ClientName}*"
                  - !Sub "arn:aws:kms:*:${CyngularAccountId}:key/*${ClientName}*"
                Action:
                  - "kms:*"
      Tags:
        - Key: Vendor
          Value: "Cyngular Security"

  ServiceManagerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cyngular-service-manager-role-${ClientName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: !Sub "cyngular-service-manager-policy-${ClientName}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "InvokeRegionProcessor"
                Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: !GetAtt RegionProcessorLambda.Arn
              - Sid: "GetRegions"
                Effect: Allow
                Action:
                  # - "ec2:DescribeRegions"
                  - "account:ListRegions"
                Resource: "*"
              - Sid: "StackSetOperations"
                Effect: Allow
                Action:
                  - "cloudformation:DescribeStackSet"
                  - "cloudformation:DescribeStackSetOperation"
                  - "cloudformation:ListStackSetOperationResults"
                Resource: "*"
      Tags:
        - Key: Vendor
          Value: "Cyngular Security"

  RegionProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cyngular-region-processor-role-${ClientName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: !Sub "cyngular-region-processor-policy-${ClientName}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "RegionProcessorGeneral"
                Effect: Allow
                Resource: "*"
                Action:
                  - "ssm:*"
                  - "route53resolver:*"
                  - "organizations:ListAccounts"
                  - "ec2:Describe*"
                  - "ec2:CreateFlowLogs"
                  - "ec2:DeleteFlowLogs"
                  - "ec2:CreateTags"
                  - "ec2:DeleteTags"
                  - "eks:List*"
                  - "eks:UpdateClusterConfig"
                  - "eks:CreateAccessEntry"
                  - "eks:AssociateAccessPolicy"
                  - "eks:DescribeCluster"
                  - "events:PutRule"
                  - "events:DisableRule"
                  - "lambda:UpdateFunctionConfiguration"
              - Sid: "CyngularBucketAdmin"
                Effect: Allow
                Resource:
                  - !GetAtt CyngularS3Bucket.Arn
                  - !Sub ["${bucket_arn}/*", bucket_arn: !GetAtt CyngularS3Bucket.Arn]
                Action:
                  - "s3:*"
              - Sid: "EditEKS"
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:eks:*:${AWS::AccountId}:cluster/*"
                  - !Sub "arn:aws:eks:*:${AWS::AccountId}:access-entry/*/role/${AWS::AccountId}/cyngular-readonly-role-${ClientName}/*"
                Action:
                  - "eks:CreateAccessEntry"
                  - "eks:AssociateAccessPolicy"
                  - "eks:DescribeCluster"
      Tags:
        - Key: Vendor
          Value: "Cyngular Security"

  AdminAndExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cyngular-admin-and-exec-roles-lambda-role-${ClientName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: !Sub "cyngular-admin-exec-lambda-policy-${ClientName}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Resource: "*"
                Action:
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:DescribeStackSet"
                  - "cloudformation:DescribeStackSetOperation"
                  - "cloudformation:DescribeStackEvents"
                  - "cloudformation:CreateStack"
                  - "cloudformation:CreateStackSet"
                  - "cloudformation:CreateStackInstances"
                  - "cloudformation:DeleteStackInstances"
                  - "cloudformation:DeleteStackSet"
                  - "cloudformation:ListStackSetOperationResults"
                  - "cloudformation:ListStackInstances"
                  - "cloudformation:UpdateStackSet"
                  - "cloudformation:UpdateStackInstances"
                  - "cloudformation:ExecuteChangeSet"
                  - "organizations:ListAccounts"
                  - "organizations:ListRoots"
                  - "iam:GetRole"
                  - "iam:getRolePolicy"
                  - "iam:CreateRole"
                  - "iam:AttachRolePolicy"
                  - "iam:PutRolePolicy"
                  - "iam:TagRole"
              - Sid: "GetStackSetTemplates"
                Effect: Allow
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${bucket_name}/stacks/*"
                    - bucket_name: !FindInMap [VARS, Cyngular, TemplateBucket]
                Action:
                  - "s3:GetObject"
      Tags:
        - Key: Vendor
          Value: "Cyngular Security"

  ServiceManagerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "cyngular-service-manager-${ClientName}"
      Description: "Created by Cyngular Security | Orchestrates service configuration across regions"
      Role: !GetAtt ServiceManagerRole.Arn
      Runtime: "python3.12"
      Handler: lambda_function.lambda_handler
      Timeout: 900
      Environment:
        Variables:
          CLIENT_NAME: !Ref ClientName
          REGION_PROCESSOR_FUNCTION_NAME: !Ref RegionProcessorLambda
          ENABLE_DNS: !Ref EnableDNS
          ENABLE_EKS: !Ref EnableEKS
          ENABLE_VPC_FLOW_LOGS: !Ref EnableVPCFlowLogs
          CYNGULAR_BUCKET: !Ref CyngularS3Bucket
          CYNGULAR_ROLE_ARN: !GetAtt ClientCyngularRole.Arn
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [VARS, Cyngular, LambdasBucketPrefix]
        S3Key: "lambdas/Gen3/ServiceManager.zip"
      Tags:
        - Key: Name
          Value: !Sub "cyngular-service-manager-${ClientName}"
        - Key: Vendor
          Value: "Cyngular Security"

  RegionProcessorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "cyngular-region-processor-${ClientName}"
      Description: "Created by Cyngular Security | Processes service configuration per region"
      Role: !GetAtt RegionProcessorRole.Arn
      Runtime: "python3.12"
      Handler: lambda_function.lambda_handler
      Timeout: 900
      Environment:
        Variables:
          CLIENT_NAME: !Ref ClientName
          CYNGULAR_BUCKET: !Ref CyngularS3Bucket
          CYNGULAR_ROLE_ARN: !GetAtt ClientCyngularRole.Arn
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [VARS, Cyngular, LambdasBucketPrefix]
        S3Key: "lambdas/Gen3/RegionProcessor.zip"
      Tags:
        - Key: Name
          Value: !Sub "cyngular-region-processor-${ClientName}"
        - Key: Vendor
          Value: "Cyngular Security"

  AdminAndExecLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "cyngular-admin-and-exec-roles-${ClientName}"
      Description: "Created by Cyngular Security | Creates admin and execution roles for StackSet"
      Role: !GetAtt AdminAndExecRole.Arn
      Runtime: "python3.12"
      Handler: lambda_function.lambda_handler
      Timeout: 900
      Environment:
        Variables:
          IS_ORG: !If [IsOrg, "true", "false"]
          ADMIN_TEMPLATE_URL: !Sub
            - "https://${bucket_name}.s3.amazonaws.com/stacks/${template_name}.yaml"
            - bucket_name: !FindInMap [VARS, Cyngular, TemplateBucket]
              template_name: !FindInMap [VARS, Cyngular, AdminRoleTemplateName]
          EXEC_TEMPLATE_URL: !Sub
            - "https://${bucket_name}.s3.amazonaws.com/stacks/${template_name}.yaml"
            - bucket_name: !FindInMap [VARS, Cyngular, TemplateBucket]
              template_name: !FindInMap [VARS, Cyngular, ExecRoleTemplateName]
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [VARS, Cyngular, LambdasBucketPrefix]
        S3Key: "lambdas/Gen3/AdminAndExec.zip"
      Tags:
        - Key: Name
          Value: !Sub "cyngular-admin-and-exec-roles-${ClientName}"
        - Key: Vendor
          Value: "Cyngular Security"

  ManagedStackSet:
    Type: AWS::CloudFormation::StackSet
    DependsOn: [AdminAndExecTrigger]
    Properties:
      StackSetName: !Sub "cyngular-member-accounts-${ClientName}"
      Description: "Cyngular member accounts monitoring setup"
      PermissionModel: SELF_MANAGED
      Capabilities:
        - CAPABILITY_NAMED_IAM

      AdministrationRoleARN: !Sub
        - "arn:aws:iam::${AWS::AccountId}:role/${template_name}"
        - template_name: !FindInMap [VARS, Cyngular, AdminRoleTemplateName]
      ExecutionRoleName: !FindInMap [VARS, Cyngular, ExecRoleTemplateName]
      TemplateURL: !Sub
        - "https://${bucket_name}.s3.amazonaws.com/${path}/MembersGlobal.yaml"
        - bucket_name: !FindInMap [VARS, Cyngular, TemplateBucket]
          path: !FindInMap [VARS, Cyngular, TemplatePath]
      Parameters:
        - ParameterKey: ClientName
          ParameterValue: !Ref ClientName
        - ParameterKey: CyngularAccountId
          ParameterValue: !Ref CyngularAccountId
        - ParameterKey: S3BucketArn
          ParameterValue: !GetAtt CyngularS3Bucket.Arn
        - ParameterKey: EnableDNS
          ParameterValue: !Ref EnableDNS
        - ParameterKey: EnableEKS
          ParameterValue: !Ref EnableEKS
        - ParameterKey: EnableVPCFlowLogs
          ParameterValue: !Ref EnableVPCFlowLogs

      Tags:
        - Key: Name
          Value: !Sub "cyngular-member-accounts-${ClientName}"
        - Key: Vendor
          Value: "Cyngular Security"

  AdminAndExecTrigger:
    Type: Custom::AdminAndExec
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt AdminAndExecLambda.Arn
      ServiceTimeout: 1200
      OVERRIDE_LAMBDA_TRIGGER: !Ref AdminAndExecOverride

  ServiceManagerTrigger:
    Type: Custom::ServiceManager
    DependsOn: [ManagedStackSet]
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt ServiceManagerLambda.Arn
      ServiceTimeout: 1200
      OVERRIDE_LAMBDA_TRIGGER: !Ref ServiceManagerOverride

  ServiceManagerScheduledRule:
    Type: AWS::Events::Rule
    DependsOn: [ServiceManagerTrigger]
    Properties:
      Name: !Sub "${ServiceManagerLambda}-rule"
      Description: "Scheduled execution for service manager"
      ScheduleExpression: "rate(60 minutes)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt ServiceManagerLambda.Arn
          Id: "ServiceManagerTarget"

  ServiceManagerScheduledRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ServiceManagerLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ServiceManagerScheduledRule.Arn

Outputs:
  CyngularBucketName:
    Description: "Name of the Cyngular S3 bucket"
    Value: !Ref CyngularS3Bucket
    Export:
      Name: !Sub "${AWS::StackName}-CyngularBucket"

  CyngularRoleArn:
    Description: "ARN of the Cyngular readonly role"
    Value: !GetAtt ClientCyngularRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CyngularRole"

  StackSetName:
    Description: "Name of the managed StackSet"
    Value: !Ref ManagedStackSet
    Export:
      Name: !Sub "${AWS::StackName}-StackSet"