AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Cyngular Deployments | Member Accounts, Global scope

Mappings:
  VARS:
    "Cyngular":
      LambdasBucketPrefix: "cyngular-onboarding"

Parameters:
  ClientName:
    Description: "The name of the client"
    Type: String
  CyngularAccountId:
    Description: "The Cyngular account id"
    Type: String
  ClientRegions:
    Description: "The region codes in which the client operates in (comma-separated for example; us-east-1,us-east-2), make sure all regions specified are enabled in the relevent accounts"
    Type: CommaDelimitedList
    AllowedValues: [me-south-1, us-east-1, us-east-2, us-west-1, us-west-2, ap-southeast-1, ap-southeast-2, ap-south-1, ap-northeast-1, ap-northeast-2, ap-northeast-3, af-south-1, eu-west-1, eu-west-2, eu-west-3, eu-central-1, eu-central-2, eu-north-1, eu-south-1, eu-south-2, ca-central-1, sa-east-1, il-central-1, af-north-1, ap-east-1, ap-south-2, ap-southeast-3, ap-southeast-4, ap-southeast-5, ca-west-1, me-central-1]
    # Description: "The regions in which the client operate"
    # Type: String
  S3BucketArn:
    Description: "The Arn of the Cyngular managed S3 Bucket"
    Type: String
  # BucketPolicyLambdaArn:
  #   Description: "The Arn of the 'Cyngular Update Bucket Policy' Lambda"
  #   Type: String
  EnableDNS:
    Description: "DNS Service - Whether to Create Route 53 Resolver, for vpc flows logs"
    Type: String
  EnableEKS:
    Description: "EKS Service - Whether to Configure EKS Audit & authenticator Logging for kubernetes Clusters"
    Type: String
  EnableVPCFlowLogs:
    Description: "VPC Flow Logs Service - Whether to Configure VPC Flow logs From vpcs to Cyngular managed S3 bucket"
    Type: String

Conditions:
  ServiceDNS: !Equals [ !Ref EnableDNS, "true" ]
  ServiceEKS: !Equals [ !Ref EnableEKS, "true" ]
  ServiceVFL: !Equals [ !Ref EnableVPCFlowLogs, "true" ]

Resources:
  ClientCyngularRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cyngular-readonly-role-${ClientName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${CyngularAccountId}:root"
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub "cyngular-readonly-policy-${ClientName}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: readOnly
                Effect: Allow
                Resource: '*'
                Action:
                  - iam:List*
                  - iam:Get*
                  - iam:GenerateServiceLastAccessedDetails

                  - organizations:Describe*
                  - organizations:List*
                  - organizations:EnableAWSServiceAccess
                  - organizations:RegisterDelegatedAdministrator

                  - ce:GetCostAndUsage
                  - ce:GetDimensionValues

                  - s3:List*
                  - s3:Describe*
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetBucketPolicy
                  - s3:GetBucketPolicyStatus
                  - s3:GetEncryptionConfiguration
                  - s3:GetBucketOwnershipControls
                  - s3:GetBucketTagging
                  - s3:GetIntelligentTieringConfiguration
                  - s3:GetAccountPublicAccessBlock
                  - s3:GetBucketPublicAccessBlock

                  - logs:List*
                  - logs:Describe*
                  - logs:Get*
                  - logs:FilterLogEvents
                  - logs:StartQuery
                  - cloudwatch:GetMetricStatistics

                  - ec2:List*
                  - ec2:CreateTags
                  - ec2:Describe*
                  - ec2:GetImageBlockPublicAccessState
                  - ecr:Describe*
                  - ecr:List*
                  - eks:Describe*
                  - eks:List*
                  - ecs:List*
                  - ecs:Describe*
                  - lambda:List*
                  - lambda:Get*
                  - rds:List*
                  - rds:Describe*

                  # CFN Stacks
                  - cloudformation:Describe*
                  - cloudformation:List*
                  - cloudformation:Get*
                  
                  - tag:GetResources

                  # Route 53
                  - 'route53:Get*'
                  - 'route53:List*'
                  - 'route53:TestDNSAnswer'
                  # CloudTrail
                  - 'cloudtrail:GetTrail'
                  - 'cloudtrail:DescribeTrails'
                  - 'cloudtrail:GetTrailStatus'
                  - 'cloudtrail:LookupEvents'
                  - 'cloudtrail:ListTags'
                  - 'cloudtrail:ListTrails'
                  - 'cloudtrail:GetEventSelectors'
                  - 'cloudtrail:GetInsightSelectors'
                  # KMS
                  - 'kms:Describe*'
                  - 'kms:Get*'
                  - 'kms:List*'
                  # Event Bridge
                  - "events:ListRules"
                  - "events:ListTargetsByRule"
                  - "events:ListEventBuses"
                  - "events:DescribeEventBus"
                  - "events:DescribeRule"
                  - "events:TestEventPattern"
                  - "events:PutRule"
                  - "events:PutTargets"

              - Sid: ec2CyngularSnapshot
                Effect: Allow
                Action:
                  - ec2:DeleteSnapshot
                  - ec2:ModifySnapshotAttribute
                Resource: '*'
                Condition:
                  StringLike:
                    aws:ResourceTag/Name: cyngular*
              - Sid: ec2CreateSnapshot
                Effect: Allow
                Resource: '*'
                Action:
                  - ec2:CopySnapshot
                  - ec2:CreateSnapshot
                  - ec2:CreateSnapshots
              - Sid: CyngularBucketAdmin
                Effect: Allow
                Resource:
                  - !Ref S3BucketArn
                  - !Sub "${S3BucketArn}/*"
                Action: "s3:*"
              - Sid: KmsPartial
                Effect: Allow
                Resource: '*'
                Action:
                  - kms:Decrypt
                  - kms:CreateGrant
              - Sid: CyngularKmsKey
                Effect: Allow
                Resource: '*'
                Action: "kms:*"
                Condition:
                  StringLike:
                    aws:ResourceTag/Name: cyngular*

  LambdasRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cyngular-lambdas-role-${ClientName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "cyngular-lambdas-policy-${ClientName}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: first
                Effect: Allow
                Resource: '*'
                Action:
                  - route53resolver:*
                  - organizations:ListAccounts
                  - ec2:Describe*
                  - ec2:CreateFlowLogs
                  - ec2:DeleteFlowLogs
                  - ec2:CreateTags
                  - ec2:DeleteTags
                  - ssm:*
                  - logs:*
                  - eks:List*
                  - eks:UpdateClusterConfig
                  - events:PutRule
                  - events:DisableRule
                  # - lambda:InvokeFunction
                  - lambda:UpdateFunctionConfiguration

              - Sid: EditEKS
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:eks:*:${AWS::AccountId}:cluster/*"
                  - !Sub "arn:aws:eks:*:${AWS::AccountId}:access-entry/*/role/${AWS::AccountId}/cyngular-readonly-role-${ClientName}/*"
                Action:
                  - "eks:CreateAccessEntry"
                  - "eks:AssociateAccessPolicy"
                  - "eks:DescribeCluster"

  LambdaOS:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "cyngular-lambda-config-os"
      Description: "Created by Cyngular Security | Configure OS Service"
      Role: !GetAtt LambdasRole.Arn
      Environment:
        Variables:
          CLIENT_REGIONS: !Join [" ", !Ref ClientRegions]
          FINAL_CRON: "cron(0 0 * * ? *)"
          FIRST_RUN: "true"

      Runtime: "python3.12"
      Handler: lambda_function.cyngular_function
      Timeout: 900
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [VARS, Cyngular, LambdasBucketPrefix]
        S3Key: !Join ['', ['lambdas/', !Join ['.', ['ConfigOS', 'zip']]]]
      Tags:
        - Key: Name
          Value: "cyngular-lambda-config-os"
        - Key: Vendor
          Value: "Cyngular Security"

  ScheduledRuleLambdaOS: 
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${LambdaOS}-rule"
      Description: "Function did not run yet"
      ScheduleExpression: "rate(2 minutes)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaOS.Arn
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambdaOS: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref LambdaOS
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRuleLambdaOS.Arn

  LambdaEKS:
    Type: AWS::Lambda::Function
    Condition: ServiceEKS
    Properties:
      FunctionName: "cyngular-lambda-config-eks"
      Description: "Created by Cyngular Security | Configure EKS Logging"
      Role: !GetAtt LambdasRole.Arn
      Environment:
        Variables:
          CLIENT_REGIONS: !Join [" ", !Ref ClientRegions]
          FINAL_CRON: "cron(0 * * * ? *)"
          FIRST_RUN: "true"
          ROLE_ARN: !GetAtt ClientCyngularRole.Arn

      Runtime: "python3.12"
      Handler: lambda_function.cyngular_function
      Timeout: 900
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [VARS, Cyngular, LambdasBucketPrefix]
        S3Key: !Join ['', ['lambdas/', !Join ['.', ['ConfigEKS', 'zip']]]]
      Tags:
        - Key: Name
          Value: "cyngular-lambda-config-eks"
        - Key: Vendor
          Value: "Cyngular Security"

  ScheduledRuleLambdaEKS: 
    Type: AWS::Events::Rule
    Condition: ServiceEKS
    Properties:
      Name: !Sub "${LambdaEKS}-rule"
      Description: "Function did not run yet"
      ScheduleExpression: "rate(2 minutes)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaEKS.Arn
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambdaEKS: 
    Type: AWS::Lambda::Permission
    Condition: ServiceEKS
    Properties: 
      FunctionName: !Ref LambdaEKS
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRuleLambdaEKS.Arn

  LambdaDNS:
    Type: AWS::Lambda::Function
    Condition: ServiceDNS
    Properties:
      FunctionName: "cyngular-lambda-config-dns"
      Description: "Created by Cyngular Security. | Configure DNS"
      Role: !GetAtt LambdasRole.Arn
      Environment:
        Variables:
          CLIENT_REGIONS: !Join [" ", !Ref ClientRegions]
          FINAL_CRON: "cron(0 * * * ? *)"
          FIRST_RUN: "true"

      Runtime: "python3.12"
      Handler: lambda_function.cyngular_function
      Timeout: 900
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [VARS, Cyngular, LambdasBucketPrefix]
        S3Key: !Join ['', ['lambdas/', !Join ['.', ['ConfigDNS', 'zip']]]]
      Tags:
        - Key: Name
          Value: "cyngular-lambda-config-dns"
        - Key: Vendor
          Value: "Cyngular Security"

  ScheduledRuleLambdaDNS:
    Type: AWS::Events::Rule
    Condition: ServiceDNS
    Properties:
      Name: !Sub "${LambdaDNS}-rule"
      Description: "Function did not run yet"
      ScheduleExpression: "rate(2 minutes)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaDNS.Arn
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambdaDNS: 
    Type: AWS::Lambda::Permission
    Condition: ServiceDNS
    Properties: 
      FunctionName: !Ref LambdaDNS
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRuleLambdaDNS.Arn

  LambdaVFL:
    Type: AWS::Lambda::Function
    Condition: ServiceVFL
    Properties:
      FunctionName: "cyngular-lambda-config-vpcflowlogs"
      Description: "Created by Cyngular Security. | Configure VPC FLOW LOGS"
      Role: !GetAtt LambdasRole.Arn
      Environment:
        Variables:
          CLIENT_REGIONS: !Join [" ", !Ref ClientRegions]
          FINAL_CRON: "cron(0 * * * ? *)"
          FIRST_RUN: "true"
          CYNGULAR_BUCKET: !Ref S3BucketArn

      Runtime: "python3.12"
      Handler: lambda_function.cyngular_function
      Timeout: 900
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [VARS, Cyngular, LambdasBucketPrefix]
        S3Key: !Join ['', ['lambdas/', !Join ['.', ['ConfigVFL', 'zip']]]]
      Tags:
        - Key: Name
          Value: "cyngular-lambda-config-vpcflowlogs"
        - Key: Vendor
          Value: "Cyngular Security"
  
  ScheduledRuleLambdaVFL: 
    Type: AWS::Events::Rule
    Condition: ServiceVFL
    Properties: 
      Name: !Sub "${LambdaVFL}-rule"
      Description: "Function did not run yet"
      ScheduleExpression: "rate(2 minutes)"
      State: "ENABLED"
      Targets: 
        - Arn: !GetAtt LambdaVFL.Arn
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambdaVFL: 
    Type: AWS::Lambda::Permission
    Condition: ServiceVFL
    Properties:
      FunctionName: !Ref LambdaVFL
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRuleLambdaVFL.Arn

  # UpdateCyngularBucketPolicyTrigger:
  #   Type: Custom::UpdateCyngularBucketPolicy
  #   DeletionPolicy: Retain
  #   UpdateReplacePolicy: Retain

  #   Version: "1.0"
  #   Properties:
  #     ServiceToken: !Ref BucketPolicyLambdaArn
  #     ServiceTimeout: 1200