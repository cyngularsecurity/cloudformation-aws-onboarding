AWSTemplateFormatVersion: 2010-09-09
# Transform:
#   - 'AWS::LanguageExtensions'

Description: |-
  Cyngular Service Management Infrastructure Template
  Creates: IAM roles/policies (custom bucket access), Service Orchestrator Lambda (region coordination),
  Regional Service Manager Lambda (per-region services), EventBridge rules (scheduled execution),
  Lambda permissions (EventBridge invocation), Custom resource triggers (initial execution)

Metadata:
  Vendor:
    Description: Cyngular Security

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Client Info"
        Parameters:
          - ClientName
          - ClientMgmtAccountId
      - Label:
          default: "Services"
        Parameters:
          - EnableVPCFlowLogs
          - EnableDNS
          - EnableEKS
      - Label:
          default: "Override Parameters"
        Parameters:
          - ServiceManagerOverride
          - ExcludedRegions

Mappings:
  Const:
    'Cyngular':
      LambdasBucketPrefix: 'cyngular-onboarding'
      PythonRuntime: 'python3.12'
      DeletionPolicy: 'Retain'
      LambdaTimeout: 900
      ServiceOrchestratorScheduleRate: 'rate(60 minutes)'
      EventState: 'ENABLED'
      LayerName: 'cyngular-onboarding-layer'

Parameters:
  ClientName:
    Description: "The Client Company name (must be lowercase, can contain letters or numbers)"
    Type: String
    AllowedPattern: "^[a-z0-9]+$"
    ConstraintDescription: "Company Name should consist of only lowercase characters and numbers, and it should not start with a number."
    MinLength: 3
    MaxLength: 15

  ClientMgmtAccountId:
    Description: "The Client Management Account ID"
    Type: String
    Default: ""

  EnableDNS:
    Description: 'Set to true to enable the service if not already enabled; set to false if the service is not desired. Or provide a custom bucket name to use an existing bucket.'
    Type: String
    Default: 'true'

  EnableVPCFlowLogs:
    Description: 'Set to true to enable the service if not already enabled; set to false if the service is not desired. Or provide a custom bucket name to use an existing bucket.'
    Type: String
    Default: 'true'

  EnableEKS:
    Description: "EKS Service - Whether to Configure EKS Audit & Authenticator Logging for kubernetes Clusters."
    Type: String
    AllowedValues: ["true", "false"]
    Default: "true"

  ServiceManagerOverride:
    Description: "change to override (retrigger) the 'Service Manager' Lambda Trigger"
    Type: Number
    Default: 1

  ExcludedRegions:
    Description: "List of regions to exclude from the service manager"
    Type: CommaDelimitedList
    Default: ""

Conditions:
  IsVPCFlowLogsEnabled: !Equals [!Ref EnableVPCFlowLogs, "true"]
  HasCustomVPCFlowLogsBucket: !And 
    - !Not [!Equals [!Ref EnableVPCFlowLogs, "true"]]
    - !Not [!Equals [!Ref EnableVPCFlowLogs, "false"]]

  IsDNSEnabled: !Equals [!Ref EnableDNS, "true"]
  HasCustomDNSBucket: !And 
    - !Not [!Equals [!Ref EnableDNS, "true"]]
    - !Not [!Equals [!Ref EnableDNS, "false"]]

  IsEKSEnabled: !Equals [!Ref EnableEKS, "true"]
  
  HasCustomBuckets: !Or
    - !Condition HasCustomDNSBucket
    - !Condition HasCustomVPCFlowLogsBucket
    
Resources:
  CustomBucketAccessPolicy:
    Type: AWS::IAM::RolePolicy
    Condition: HasCustomBuckets
    Properties:
      PolicyName: !Sub "custom-bucket-access-policy-${ClientName}"
      RoleName:
        Fn::ImportValue:
          !Join [ ":", ["CyngularSecurity", "ReadonlyRoleName", !Ref ClientName ]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - !If
            - HasCustomDNSBucket
            - Sid: "CustomDNSBucketAccess"
              Effect: Allow
              Resource:
                - !Sub "arn:aws:s3:::${EnableDNS}"
                - !Sub "arn:aws:s3:::${EnableDNS}/*"
              Action:
                - "s3:ListBucket"
                - "s3:GetObject"
                - "s3:GetBucketLocation"
                - "s3:ListBucketMultipartUploads"
                - "s3:ListMultipartUploadParts"
                - "s3:AbortMultipartUpload"
            - !Ref AWS::NoValue
              
          - !If
            - HasCustomVPCFlowLogsBucket
            - Sid: "CustomVPCFlowLogsBucketAccess"
              Effect: Allow
              Resource:
                - !Sub "arn:aws:s3:::${EnableVPCFlowLogs}"
                - !Sub "arn:aws:s3:::${EnableVPCFlowLogs}/*"
              Action:
                - "s3:ListBucket"
                - "s3:GetObject"
                - "s3:GetBucketLocation"
                - "s3:ListBucketMultipartUploads"
                - "s3:ListMultipartUploadParts"
                - "s3:AbortMultipartUpload"
            - !Ref AWS::NoValue

  ##############################
  # Cyngular Layer
  ##############################
  CyngularLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !FindInMap [Const, Cyngular, LayerName]
      Description: "Shared utilities and dependencies for Cyngular OnBoarding Lambda functions"
      Content:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [Const, Cyngular, LambdasBucketPrefix]
        S3Key: 'layers/cyngular-onboarding.zip'
      CompatibleRuntimes: [!FindInMap [Const, Cyngular, PythonRuntime]]
      CompatibleArchitectures:
        - x86_64

  CyngularServiceOrchestratorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cyngular-service-orchestrator-role-${ClientName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Tags:
        - Key: Vendor
          Value: "Cyngular Security"
        - Key: ClientName
          Value: !Ref ClientName

  CyngularServiceOrchestratorRolePolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: !Sub "cyngular-service-orchestrator-policy-${ClientName}"
      RoleName: !Ref CyngularServiceOrchestratorRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "InvokeRegionProcessor"
            Effect: Allow
            Action:
              - "lambda:InvokeFunction"
            Resource: !GetAtt CyngularRegionalServiceManagerLambda.Arn

          - Sid: "PutMetricData"
            Effect: Allow
            Action:
              - "cloudwatch:PutMetricData"
            Resource: "*"

          - Sid: "GetRegions"
            Effect: Allow
            Action:
              - "ec2:DescribeRegions"
            Resource: "*"

  CyngularRegionalServiceManagerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cyngular-regional-service-manager-role-${ClientName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Tags:
        - Key: Vendor
          Value: "Cyngular Security"
        - Key: ClientName
          Value: !Ref ClientName

  CyngularRegionalServiceManagerRolePolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: !Sub "cyngular-regional-service-manager-policy-${ClientName}"
      RoleName: !Ref CyngularRegionalServiceManagerRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "Route53Resolver"
            Effect: Allow
            Resource: [
              !Sub "arn:aws:route53resolver:*:${AWS::AccountId}:resolver-query-log-config/rqlc-*"
            ]
            Action:
              - "route53resolver:ListResolverQueryLogConfigs"
              - "route53resolver:CreateResolverQueryLogConfig"
              - "route53resolver:AssociateResolverQueryLogConfig"
              - "route53resolver:TagResource"
            Condition:
              StringEquals:
                "route53resolver:RequestTag/Vendor": "Cyngular Security"

          - Sid: "RegionProcessorGeneral"
            Effect: Allow
            Resource: "*"
            Action:
              - "ssm:*"

              - "organizations:ListAccounts"

              - "s3:GetBucketTagging"
              - "s3:PutBucketTagging"
              - "s3:ListBucket"

              - "ec2:DescribeInstances"
              - "ec2:DescribeVpcs"
              - "ec2:CreateFlowLogs"
              - 'ec2:CreateTags'
              # - "ec2:DeleteFlowLogs"
              # - "ec2:CreateTags"
              # - "ec2:DeleteTags"

              - "eks:List*"
              - "eks:DescribeCluster"

          - Sid: "RestrictedEC2FlowLogs"
            Effect: Allow
            Resource: "*"
            Action:
              - "ec2:CreateFlowLogs"
              - "ec2:CreateTags"
            Condition:
              StringEquals:
                "ec2:RequestTag/Vendor": "Cyngular Security"

          - Sid: "PutMetricData"
            Effect: Allow
            Action:
              - "cloudwatch:PutMetricData"
              - "logs:CreateLogDelivery"
            Resource: "*"

          - Sid: "RestrictedEKSLoggingUpdate"
            Effect: Allow
            Resource:
              - !Sub "arn:aws:eks:*:${AWS::AccountId}:cluster/*"
            Action:
              - "eks:UpdateClusterConfig"
            Condition:
              StringEquals:
                "eks:RequestTag/Vendor": "Cyngular Security"

          - Sid: "DescribeEKS"
            Effect: Allow
            Resource:
              - !Sub "arn:aws:eks:*:${AWS::AccountId}:cluster/*"
            Action:
              - "eks:DescribeCluster"
          - Sid: "EditEksAccessEntry"
            Effect: Allow
            Resource:
              - !Sub "arn:aws:eks:*:${AWS::AccountId}:access-entry/*/role/${AWS::AccountId}/cyngular-readonly-role-${ClientName}/*"
            Action:
              - "eks:CreateAccessEntry"
              - "eks:AssociateAccessPolicy"

          - Sid: "CyngularBucketAdmin"
            Effect: Allow
            Resource:
              - !Sub "arn:aws:s3:::cyngular-${ClientName}-bucket-${ClientMgmtAccountId}"
              - !Sub "arn:aws:s3:::cyngular-${ClientName}-bucket-${ClientMgmtAccountId}/*"
            Action:
              - "s3:PutObject"
            Condition:
              StringEquals:
                "s3:RequestTag/Vendor": "Cyngular Security"


  CyngularServiceOrchestratorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "cyngular-service-orchestrator-${ClientName}"
      Description: "Created by Cyngular Security | Orchestrates service configuration across regions"
      Role: !GetAtt CyngularServiceOrchestratorRole.Arn
      Runtime: "python3.12"
      Handler: lambda_function.lambda_handler
      Timeout: 900
      Layers: [!Ref CyngularLayer]
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [Const, Cyngular, LambdasBucketPrefix]
        S3Key: "lambdas/ServiceManager.zip"

      Environment:
        Variables:
          CLIENT_NAME: !Ref ClientName
          REGIONAL_SERVICE_MANAGER_FUNCTION_NAME: !Ref CyngularRegionalServiceManagerLambda

          ENABLE_DNS: !If [IsDNSEnabled, "true", "false"]
          ENABLE_EKS: !If [IsEKSEnabled, "true", "false"]
          ENABLE_VPC_FLOW_LOGS: !If [IsVPCFlowLogsEnabled, "true", "false"]

          EXCLUDED_REGIONS: !Join [",", !Ref ExcludedRegions]
          CYNGULAR_BUCKET: !Sub "cyngular-${ClientName}-bucket-${ClientMgmtAccountId}"
          CYNGULAR_ROLE_ARN:
            Fn::ImportValue:
              !Join [ ":", ["CyngularSecurity", "ReadonlyRoleArn", !Ref ClientName ] ]
      Tags:
        - Key: Name
          Value: !Sub "cyngular-service-manager-${ClientName}"
        - Key: Vendor
          Value: "Cyngular Security"
        - Key: ClientName
          Value: !Ref ClientName

  CyngularRegionalServiceManagerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "cyngular-regional-service-manager-${ClientName}"
      Description: "Created by Cyngular Security | Processes service configuration per region"
      Role: !GetAtt CyngularRegionalServiceManagerRole.Arn
      Runtime: "python3.12"
      Handler: lambda_function.lambda_handler
      Timeout: 900
      Layers: [!Ref CyngularLayer]

      Environment:
        Variables:
          CLIENT_NAME: !Ref ClientName
          CYNGULAR_BUCKET: !Sub "cyngular-${ClientName}-bucket-${ClientMgmtAccountId}"
          CYNGULAR_ROLE_ARN:
            Fn::ImportValue:
              !Join [ ":", ["CyngularSecurity", "ReadonlyRoleArn", !Ref ClientName ] ]
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [Const, Cyngular, LambdasBucketPrefix]
        S3Key: "lambdas/RegionProcessor.zip"
      Tags:
        - Key: Name
          Value: !Sub "cyngular-region-processor-${ClientName}"
        - Key: Vendor
          Value: "Cyngular Security"
        - Key: ClientName
          Value: !Ref ClientName


  CyngularServiceOrchestratorTrigger:
    Type: Custom::ServiceManager
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt CyngularServiceOrchestratorLambda.Arn
      ServiceTimeout: 1200
      OVERRIDE_LAMBDA_TRIGGER: !Ref ServiceManagerOverride

  CyngularServiceOrchestratorScheduledRule:
    Type: AWS::Events::Rule
    DependsOn: [CyngularServiceOrchestratorTrigger]
    Properties:
      Name: !Sub "${CyngularServiceOrchestratorLambda}-rule"
      Description: "Scheduled execution for service manager"
      ScheduleExpression: !FindInMap [Const, Cyngular, ServiceOrchestratorScheduleRate]
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt CyngularServiceOrchestratorLambda.Arn
          Id: "ServiceManagerTarget"

  CyngularServiceOrchestratorScheduledRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CyngularServiceOrchestratorLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CyngularServiceOrchestratorScheduledRule.Arn

Outputs:
  CyngularServiceOrchestratorFunctionName:
    Description: "Name of the Cyngular Service Orchestrator Lambda function"
    Value: !Ref CyngularServiceOrchestratorLambda
    Export:
      Name: !Join [ ":", ["CyngularSecurity", "CyngularServiceOrchestratorFunctionName", !Ref ClientName]]

  CyngularRegionalServiceManagerFunctionName:
    Description: "Name of the Cyngular Regional Service Manager Lambda function"
    Value: !Ref CyngularRegionalServiceManagerLambda
    Export:
      Name: !Join [ ":", ["CyngularSecurity", "CyngularRegionalServiceManagerFunctionName", !Ref ClientName]]
