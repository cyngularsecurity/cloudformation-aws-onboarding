AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Cyngular
  Main OnBoarding stack template

Metadata:
  Vendor:
    Description: Cyngular Security

Parameters:
  ClientRegions:
    Description: "The regions in which your company operates in (comma-separated for example; us-east-1,us-east-2), make sure all regions specified are enabled in the relevent accounts"
    Type: CommaDelimitedList
    AllowedValues: [me-south-1, us-east-1, us-east-2, us-west-1, us-west-2, ap-southeast-1, ap-southeast-2, ap-south-1, ap-northeast-1, ap-northeast-2, ap-northeast-3, af-south-1, eu-west-1, eu-west-2, eu-west-3, eu-central-1, eu-central-2, eu-north-1, eu-south-1, eu-south-2, ca-central-1, sa-east-1, il-central-1, af-north-1, ap-east-1, ap-south-2, ap-southeast-3, ap-southeast-4, ap-southeast-5, ca-west-1, me-central-1]
  ClientName:
    Description: "The client company name (must be lowercase, can contain letters, numbers and dashes)"
    Type: String
    AllowedPattern: "^[a-z0-9]+$"
    MinLength: 3
    MaxLength: 15

  EnableDNS:
    Description: "Set to 'true' to enable the service if not already enabled; set to 'false' if the service is enabled or not desired. Add the tag {key: 'cyngular-dnslogs', value: 'true'} to the resource bucket only if telemetry is already collected for Cyngular analysis."
    Type: String
    AllowedValues: ["true", "false"]
    Default: "true"
  
  EnableVPCFlowLogs:
    Description: "Set to 'true' to enable the service if not already enabled; set to 'false' if the service is enabled or not desired. Add the tag {key: 'cyngular-vpcflowlogs', value: 'true'} to the resource bucket only if telemetry is already collected for Cyngular analysis."
    Type: String
    AllowedValues: ["true", "false"]
    Default: "true"

  CyngularSourceBucketPrefix:
    Description: "The prefix of the bucket where the source code is located"
    Type: String
    Default: "cyngular-onboarding"

  ServiceTimeout:
    Description: "The timeout for the lambda triggers"
    Type: Number
    Default: 300

Conditions:
  ServiceDNS: !Equals [ !Ref EnableDNS, "true" ]
  ServiceVFL: !Equals [ !Ref EnableVPCFlowLogs, "true" ]

Resources:
  LambdasRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cyngular-offboarding-lambdas-role-${ClientName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "cyngular-offboarding-lambdas-policy-${ClientName}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CyngularGeneral
                Effect: Allow
                Resource: '*'
                Action:
                  - ssm:*
                  - logs:*
                  - route53resolver:*
  
                  - organizations:ListAccounts

                  - ec2:Describe*
                  - ec2:CreateFlowLogs
                  - ec2:DeleteFlowLogs
                  - ec2:CreateTags
                  - ec2:DeleteTags

                  - events:DisableRule

              - Sid: GetStackSetTemplates    
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:s3:::${CyngularSourceBucketPrefix}-${AWS::Region}/lambdas/*"
                Action:
                  - "s3:GetObject"

  LambdaDeleteDNS:
    Type: AWS::Lambda::Function
    Condition: ServiceDNS
    Properties:
      FunctionName: !Sub "cyngular-lambda-remove-dns-${ClientName}"
      Description: "Created by Cyngular Security. | Remove DNS"
      Role: !GetAtt LambdasRole.Arn

      Environment:
        Variables:
          CLIENT_REGIONS: !Join [" ", !Ref ClientRegions]

      Runtime: "python3.12"
      Handler: index.cyngular_function
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          import cfnresponse

          def dnslogs(curr_region):
              try:
                  r_53_client = boto3.client('route53resolver', region_name=curr_region)
                  ec2_client = boto3.client('ec2', region_name=curr_region)
                  
                  region_query_log_configs = r_53_client.list_resolver_query_log_configs()['ResolverQueryLogConfigs']
                  cyngular_resolver_id = ''
                  
                  for region_query_log_config in region_query_log_configs:
                      try:
                          if region_query_log_config['Name'] == 'cyngular_dns':
                              cyngular_resolver_id = region_query_log_config['Id']
                              break
                      except:
                          pass

                  if cyngular_resolver_id:
                      vpc_list = ec2_client.describe_vpcs()
                      if "Vpcs" in vpc_list:                  
                          for vpc in vpc_list["Vpcs"]:
                              try:
                                  vpc_id = vpc["VpcId"]
                                  logging.info (f'DELETING CONFIGURATION OF DNSLOGS ON VPC-ID: {vpc_id}')
                                  r_53_client.disassociate_resolver_query_log_config(ResolverQueryLogConfigId = cyngular_resolver_id, ResourceId = vpc_id )
                                  logging.info(f'COMMAND SUCCEEDED.')
                              except Exception as e:
                                  if "association doesn't exist" in str(e):
                                      logging.critical(f'{vpc_id} - ResolverWasNotAssociated')
                                  else:
                                      logging.critical(str(e))
              except Exception as e:
                  logging.critical(str(e))

          def cyngular_function(event, context):
              logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              try:
                  logger.info ('STARTING CYNGULARS FUNCTION...')
                  logger.info(f'DELETING DNSLOGS...')
                  events_client = boto3.client('events')
                  REGIONS = os.environ['CLIENT_REGIONS']

                  for curr_region in REGIONS.split(' '):
                      logger.info(f'AWS REGION: {curr_region}')
                      try:
                          dnslogs(curr_region)
                      except Exception as e:
                          logger.critical(str(e))
                  try:
                      logger.info('DEACTIVATING EVENT BUS RULE')
                      events_client.disable_rule(
                          Name='cyngular-lambda-config-dns-rule',
                          EventBusName='default'
                      )
                      logger.info('DONE!')
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'msg' : 'Done'})

                  except events_client.exceptions.ResourceNotFoundException:
                      logger.warning('Rule cyngular-lambda-config-dns-rule does not exist on EventBus default.')
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'msg' : 'Rule does not exist'})
                  except Exception as e:
                      logger.critical(str(e))
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'msg' : str(e)})

              except Exception as e:
                  logger.critical(str(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'msg' : str(e)})

  LambdaDeleteVFL:
    Type: AWS::Lambda::Function
    Condition: ServiceVFL
    Properties:
      FunctionName: !Sub "cyngular-lambda-remove-vpcflowlogs-${ClientName}"
      Description: "Created by Cyngular Security. | Remove VPCFLOWLOGS"
      Role: !GetAtt LambdasRole.Arn

      Environment:
        Variables:
          CLIENT_REGIONS: !Join [" ", !Ref ClientRegions]

      Runtime: "python3.12"
      Handler: index.cyngular_function
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          import cfnresponse

          def vpcflowlogs(curr_region):
              try:
                  logging.info('DELETING VPCFLOWLOGS...')

                  flowlogs_ids_list = []
                  ec2_client = boto3.client('ec2', region_name=curr_region)
                  
                  response = ec2_client.describe_flow_logs(
                      Filters=[
                          {
                              'Name': 'tag:Name',
                              'Values': [
                                  'Cyngular-vpc-flowlogs'
                              ]
                          },
                      ]
                  )
                  for flow_log in response['FlowLogs']:
                      flowlogs_ids_list.append(flow_log['FlowLogId'])
                  
                  if not flowlogs_ids_list:
                      logging.info('No VPC flow logs to delete.')
                      return
                  logging.info(f'DELETING THE VPCFLOWLOGS: {flowlogs_ids_list}')
                  response = ec2_client.delete_flow_logs(
                      FlowLogIds=flowlogs_ids_list
                  )
                  logging.info(f'COMMAND SUCCEEDED.')
              except Exception as e:
                  logging.critical(str(e))
                  
          def cyngular_function(event, context):
              logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              try:
                  logger.info('STARTING CYNGULARS FUNCTION...')
                  events_client = boto3.client('events')
                  REGIONS = os.environ['CLIENT_REGIONS']

                  for curr_region in REGIONS.split(' '):
                      logger.info(f'AWS REGION: {curr_region}')
                      try:
                          vpcflowlogs(curr_region)
                      except Exception as e:
                          logger.critical(str(e))

                  try:
                      logger.info('DEACTIVATING EVENT BUS RULE')
                      events_client.disable_rule(
                          Name='cyngular-lambda-config-vpcflowlogs-rule',
                          EventBusName='default'
                      )
                      logger.info('DONE!')
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'msg' : 'Done'})
                  except events_client.exceptions.ResourceNotFoundException:
                      logger.warning('Rule cyngular-lambda-config-vpcflowlogs-rule does not exist on EventBus default.')
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'msg' : 'Rule does not exist'})
                  except Exception as e:
                      logger.critical(str(e))
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'msg' : str(e)})

              except Exception as e:
                  logger.critical(str(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'msg' : str(e)})

  LambdaDeleteDNSTrigger:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Condition: ServiceDNS

    Type: Custom::LambdaDeleteDNS
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaDeleteDNS.Arn
      ServiceTimeout: !Ref ServiceTimeout

  LambdaDeleteVFLTrigger:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Condition: ServiceVFL

    Type: Custom::LambdaDeleteVFL
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaDeleteVFL.Arn
      ServiceTimeout: !Ref ServiceTimeout
