AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Cyngular
  Main OnBoarding stack template

Metadata:
  Vendor:
    Description: Cyngular Security

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Client Info"
        Parameters:
          - ClientName
          - ClientRegions
          - OrganizationId
      - Label:
          default: "Services"
        Parameters:
          - CloudTrailBucket
          - EnableDNS
          - EnableVPCFlowLogs
          - EnableEKS
      - Label:
          default: "Cyngular Info"
        Parameters:
          - CyngularAccountId

    ParameterLabels:
      ClientName:
        default: "Company Name"
      ClientRegions:
        default: "Company Regions"
      OrganizationId:
        default: "Organization Id"
      CloudTrailBucket:
        default: "CloudTrail Bucket Name"
      EnableDNS:
        default: "DNS Enabled"
      EnableEKS:
        default: "EKS Enabled"
      EnableVPCFlowLogs:
        default: "VPCFlowLogs Enabled"
      CyngularAccountId:
        default: "Cyngular Account Id"

Mappings:
  VARS:
    "Cyngular":
      TemplateBucket: "cyngular-onboarding-templates"
      LambdasBucketPrefix: "cyngular-onboarding"

Parameters:
  ClientName:
    Description: "The Client Company name (must be lowercase, can contain letters or numbers)"
    Type: String
    AllowedPattern: "^[a-z0-9]+$"
    ConstraintDescription: "Company Name should consist of only lowercase characters and numbers, and it should not start with a number."
    MinLength: 3
    MaxLength: 15

  OrganizationId:
    Description: "Specify the Company Organization id | leave empty if not"
    Type: String
    Default: ""

  ClientRegions:
    Description: "The regions in which your Company operates in (comma-separated for example; us-east-1,us-east-2), make sure all regions specified are enabled in the relevent accounts"
    Type: CommaDelimitedList
    AllowedValues: [me-south-1, us-east-1, us-east-2, us-west-1, us-west-2, ap-southeast-1, ap-southeast-2, ap-south-1, ap-northeast-1, ap-northeast-2, ap-northeast-3, af-south-1, eu-west-1, eu-west-2, eu-west-3, eu-central-1, eu-central-2, eu-north-1, eu-south-1, eu-south-2, ca-central-1, sa-east-1, il-central-1, af-north-1, ap-east-1, ap-south-2, ap-southeast-3, ap-southeast-4, ap-southeast-5, ca-west-1, me-central-1]

  CyngularAccountId:
    Description: "The Cyngular Account ID to assume the read only role [851565895544]"
    Type: String
    Default: "851565895544"

  CloudTrailBucket:
    Description: "Enter a bucket Name, if you already configured CloudTrail To Send Logs to an S3 bucket. if so, also add the tag {key: 'cyngular-cloudtrail', value: 'true'} to the bucket, otherwise leave empty."
    Type: String
    Default: ""

  EnableDNS:
    Description: "Set to 'true' to enable the service if not already enabled; set to 'false' if the service is enabled or not desired. Add the tag {key: 'cyngular-dnslogs', value: 'true'} to the resource bucket only if telemetry is already collected for Cyngular analysis."
    Type: String
    AllowedValues: ["true", "false"]
    Default: "true"

  EnableEKS:
    Description: "EKS Service - Whether to Configure EKS Audit & Authenticator Logging for kubernetes Clusters."
    Type: String
    AllowedValues: ["true", "false"]
    Default: "true"

  EnableVPCFlowLogs:
    Description: "Set to 'true' to enable the service if not already enabled; set to 'false' if the service is enabled or not desired. Add the tag {key: 'cyngular-vpcflowlogs', value: 'true'} to the resource bucket only if telemetry is already collected for Cyngular analysis."
    Type: String
    AllowedValues: ["true", "false"]
    Default: "true"

Conditions:
  IsOrg: !Not [!Equals [!Ref OrganizationId, ""]]
  CreateCloudTrail: !Equals [ !Ref CloudTrailBucket, "" ]

  ServiceDNS: !Equals [ !Ref EnableDNS, "true" ]
  ServiceEKS: !Equals [ !Ref EnableEKS, "true" ]
  ServiceVFL: !Equals [ !Ref EnableVPCFlowLogs, "true" ]

Resources:
  CyngularS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "cyngular-${ClientName}-bucket-${AWS::AccountId}"

      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub "cyngular-${ClientName}-bucket-${AWS::AccountId}"

        - Key: cyngular-os
          Value: true
        - Key: cyngular-visibility
          Value: true
        - !If
            - CreateCloudTrail
            - Key: cyngular-cloudtrail
              Value: true
            - !Ref AWS::NoValue
        - !If
            - ServiceDNS
            - Key: cyngular-dnslogs
              Value: true
            - !Ref AWS::NoValue
        - !If
            - ServiceVFL
            - Key: cyngular-vpcflowlogs
              Value: true
            - !Ref AWS::NoValue
        - !If
            - ServiceEKS
            - Key: cyngular-ekslogs
              Value: true
            - !Ref AWS::NoValue

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CyngularS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'LambdaRead'
            Effect: Allow
            Principal: 
              AWS: [
                !Sub "arn:aws:iam::${AWS::AccountId}:root",
                !Sub "arn:aws:iam::${CyngularAccountId}:root"                
              ]
            Action:
              - 's3:*'
            Resource:
              - !GetAtt CyngularS3Bucket.Arn
              - !Sub "arn:aws:s3:::${CyngularS3Bucket}/*"

          - !If
            - CreateCloudTrail
            - Sid: 'CloudTrailAclCheck'
              Effect: Allow
              Principal:
                Service: "cloudtrail.amazonaws.com"
              Action: 's3:GetBucketAcl'
              Resource: !GetAtt CyngularS3Bucket.Arn
              Condition:
                StringEquals:
                  AWS:SourceArn: !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/cyngular-cloudtrail"
            - !Ref "AWS::NoValue"

          - !If 
            - CreateCloudTrail
            - Sid: 'CloudTrailWrite'
              Effect: Allow
              Principal: 
                Service: "cloudtrail.amazonaws.com"
              Action: 
                - 's3:PutObject'
              Resource: 
                - !Sub "arn:aws:s3:::${CyngularS3Bucket}/AWSLogs/${AWS::AccountId}/*"
                - !If 
                  - IsOrg
                  - !Sub "arn:aws:s3:::${CyngularS3Bucket}/AWSLogs/${OrganizationId}/*"
                  - !Ref "AWS::NoValue"
              Condition:
                StringEquals:
                  s3:x-amz-acl: "bucket-owner-full-control"
                  AWS:SourceArn: !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/cyngular-cloudtrail"
            - !Ref "AWS::NoValue"

  ClientCloudTrail:
    DependsOn: S3BucketPolicy
    Condition: CreateCloudTrail
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: cyngular-cloudtrail
      S3BucketName: !Ref CyngularS3Bucket
      InsightSelectors:
        - InsightType: ApiCallRateInsight
        - InsightType: ApiErrorRateInsight
      EventSelectors:
        - IncludeManagementEvents: true
          ExcludeManagementEventSources:
            - kms.amazonaws.com
          DataResources:
            - Type: AWS::Lambda::Function
              Values:
                - arn:aws:lambda
      IsLogging: true
      IsMultiRegionTrail: true
      IsOrganizationTrail: !If [IsOrg, true, false]
      IncludeGlobalServiceEvents: true
      Tags:
        - Key: Name
          Value: cyngular-cloudtrail

  ClientCyngularRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cyngular-readonly-role-${ClientName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${CyngularAccountId}:root"
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: cyngular-readonly-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'ReadOnly'
                Effect: Allow
                Resource: '*'
                Action:
                  - iam:List*
                  - iam:Get*
                  - iam:GenerateServiceLastAccessedDetails

                  - organizations:Describe*
                  - organizations:List*

                  - ce:List*
                  - ce:Get*
                  - ce:Describe*

                  - s3:List*
                  - s3:Describe*
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetBucketPolicy
                  - s3:GetBucketPolicyStatus
                  - s3:GetEncryptionConfiguration
                  - s3:GetBucketOwnershipControls
                  - s3:GetBucketTagging
                  - s3:GetIntelligentTieringConfiguration
                  - s3:GetAccountPublicAccessBlock
                  - s3:GetBucketPublicAccessBlock

                  - logs:List*
                  - logs:Describe*
                  - logs:Get*
                  - logs:FilterLogEvents
                  - logs:StartQuery
                  - cloudwatch:GetMetricStatistics

                  - ec2:List*
                  - ec2:CreateTags
                  - ec2:Describe*
                  - ec2:GetImageBlockPublicAccessState
                  - ecr:Describe*
                  - ecr:List*
                  - eks:Describe*
                  - eks:List*
                  - ecs:List*
                  - ecs:Describe*
                  - lambda:List*
                  - lambda:Get*
                  - rds:List*
                  - rds:Describe*

                  - cloudformation:Describe*
                  - cloudformation:List*
                  - cloudformation:Get*
                  
                  - tag:GetResources

                  - 'route53:Get*'
                  - 'route53:List*'
                  - 'route53:TestDNSAnswer'

                  - 'cloudtrail:GetTrail'
                  - 'cloudtrail:DescribeTrails'
                  - 'cloudtrail:GetTrailStatus'
                  - 'cloudtrail:LookupEvents'
                  - 'cloudtrail:ListTags'
                  - 'cloudtrail:ListTrails'
                  - 'cloudtrail:GetEventSelectors'
                  - 'cloudtrail:GetInsightSelectors'

                  - 'kms:Describe*'
                  - 'kms:Get*'
                  - 'kms:List*'

                  - "events:ListRules"
                  - "events:ListTargetsByRule"
                  - "events:ListEventBuses"
                  - "events:DescribeEventBus"
                  - "events:DescribeRule"
                  - "events:TestEventPattern"
                  - "events:PutRule"
                  - "events:PutTargets"

                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:GetMetricData"


              - Sid: 'Ec2CyngularSnapshot'
                Effect: Allow
                Action:
                  - ec2:DeleteSnapshot
                  - ec2:ModifySnapshotAttribute
                Resource: '*'
                Condition:
                  StringLike:
                    aws:ResourceTag/Name: cyngular*
              - Sid: 'Ec2CreateSnapshot'
                Effect: Allow
                Resource: '*'
                Action:
                  - ec2:CopySnapshot
                  - ec2:CreateSnapshot
                  - ec2:CreateSnapshots
              - Sid: 'CyngularBucketAdmin'
                Effect: Allow
                Resource:
                  - !GetAtt CyngularS3Bucket.Arn
                  - !Sub ["${bucket_arn}/*", bucket_arn: !GetAtt CyngularS3Bucket.Arn]
                Action:
                  - "s3:*"
              - Sid: 'KmsPartial'
                Effect: Allow
                Resource: '*'
                Action:
                  - kms:Decrypt
                  - kms:CreateGrant
              - Sid: 'CyngularKmsKey'
                Effect: Allow
                Resource: '*'
                Action:
                  - kms:*
                Condition:
                  StringLike:
                    aws:ResourceTag/Name: cyngular*
              - Sid: 'ListRegionsOnAccounts'
                Effect: "Allow"
                Action:
                  - "account:ListRegions"
                Resource:
                  - arn:aws:account::*:account/o-*/*
                  - arn:aws:account::*:account
      Tags:
        - Key: Vendor
          Value: "Cyngular Security"

  LambdasRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cyngular-lambdas-role-${ClientName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: 
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "cyngular-lambdas-policy-${ClientName}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'CyngularGeneral'
                Effect: Allow
                Resource: '*'
                Action:
                  - ssm:*
                  - logs:*
                  - route53resolver:*
  
                  - organizations:ListAccounts
                  # - organizations:ListOrganizationalUnitsForParent

                  - ec2:Describe*
                  - ec2:CreateFlowLogs
                  - ec2:DeleteFlowLogs
                  - ec2:CreateTags
                  - ec2:DeleteTags
                  - eks:List*
                  - eks:UpdateClusterConfig

                  - events:PutRule
                  - lambda:UpdateFunctionConfiguration

                  # - sts:GetCallerIdentity
                  # - lambda:InvokeFunction
                  - events:DisableRule

              - Sid: 'CyngularBucketAdmin'
                Effect: Allow
                Resource:
                  - !GetAtt CyngularS3Bucket.Arn
                  - !Sub ["${bucket_arn}/*", bucket_arn: !GetAtt CyngularS3Bucket.Arn]
                Action:
                  - "s3:*"

              - Sid: 'EditEKS'
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:eks:*:${AWS::AccountId}:cluster/*"
                  - !Sub "arn:aws:eks:*:${AWS::AccountId}:access-entry/*/role/${AWS::AccountId}/cyngular-readonly-role-${ClientName}/*"
                Action:
                  - "eks:CreateAccessEntry"
                  - "eks:AssociateAccessPolicy"
                  - "eks:DescribeCluster"
      Tags:
        - Key: Vendor
          Value: "Cyngular Security"

  ManagerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cyngular-manager-lambda-role-${ClientName}"
      MaxSessionDuration: 43200

      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "ManagerLambdaRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: 'InvokeBucketPolicyLambda'
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunction
                Resource:
                  - !GetAtt LambdaUpdateCyngularBucketPolicy.Arn
              - Sid: 'StackSetManager'
                Effect: Allow
                Resource: "*"
                Action:
                  - cloudformation:GetTemplateSummary
                  - cloudformation:ListStackSetOperationResults
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackSet
                  - cloudformation:DescribeStackSetOperation
                  - cloudformation:CreateStack
                  - cloudformation:CreateStackSet
                  - cloudformation:CreateStackInstances
                  - cloudformation:DeleteStackSet
                  - cloudformation:DeleteStackInstances
                  - cloudformation:TagResource
              - Sid: 'OrgManager'
                Effect: Allow
                Resource: "*"
                Action:
                  - organizations:ListAccounts
                  - organizations:ListRoots
              - Sid: 'LogsManager'
                Effect: Allow
                Action: logs:*
                Resource: "arn:aws:logs:*:*:*"
              - Sid: 'IdentityManager'
                Effect: Allow
                Resource: "*"
                Action:
                  - iam:GetRole
                  - iam:getRolePolicy
                  - iam:PutRolePolicy
                  - iam:DetachRolePolicy
                  - iam:AttachRolePolicy
                  - iam:DeleteRolePolicy
              - Sid: 'GetStackSetTemplates'
                Effect: "Allow"
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${bucket_name}/stacks/*"
                    - bucket_name: !FindInMap [VARS, Cyngular, TemplateBucket]
                Action:
                  - "s3:GetObject"

  LambdaAdminAndExecRole:
    Type: AWS::IAM::Role
    DependsOn: [CyngularS3Bucket]
    Properties:
      RoleName: !Sub "cyngular-admin-and-exec-roles-lambda-role-${ClientName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "AdminExecLambdaRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Resource: "*"
                Action:
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:DescribeStackSet"
                  - "cloudformation:DescribeStackSetOperation"
                  - "cloudformation:DescribeStackEvents"
                  - "cloudformation:CreateStack"
                  - "cloudformation:CreateStackSet"
                  - "cloudformation:CreateStackInstances"
                  - "cloudformation:CreateChangSet"
                  - "cloudformation:DeleteStackInstances"
                  - "cloudformation:DeleteStackSet"
                  - "cloudformation:ListStackSetOperationResults"
                  - "cloudformation:ListStackInstances"
                  - "cloudformation:UpdateStackSet"
                  - "cloudformation:UpdateStackInstances"
                  - "cloudformation:ExecuteChangeSet"

                  - "organizations:ListAccounts"
                  - "organizations:ListRoots"

                  - "iam:GetRole"
                  - "iam:getRolePolicy"
                  - "iam:CreateRole"
                  - "iam:AttachRolePolicy"
                  - "iam:PutRolePolicy"

                  - "logs:*"
              - Sid: 'GetStackSetTemplates'
                Effect: "Allow"
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${bucket_name}/stacks/*"
                    - bucket_name: !FindInMap [VARS, Cyngular, TemplateBucket]
                Action:
                  - "s3:GetObject"

  LambdaOS:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "cyngular-lambda-config-os"
      Description: "Created by Cyngular Security | Configure OS Service"
      Role: !GetAtt LambdasRole.Arn
      Environment:
        Variables:
          CLIENT_REGIONS: !Join [" ", !Ref ClientRegions]
          FINAL_CRON: "cron(0 0 * * ? *)"
          FIRST_RUN: "true"

      Runtime: "python3.12"
      Handler: lambda_function.cyngular_function
      Timeout: 900
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [VARS, Cyngular, LambdasBucketPrefix]
        S3Key: !Join ['', ['lambdas/', !Join ['.', ['ConfigOS', 'zip']]]]
      Tags:
        - Key: Name
          Value: "cyngular-lambda-config-os"
        - Key: Vendor
          Value: "Cyngular Security"

  ScheduledRuleLambdaOS:
    Type: AWS::Events::Rule
    DependsOn: [StackSetManagerTrigger]
    Properties:
      Name: !Sub "${LambdaOS}-rule"
      Description: "Function did not run yet"
      ScheduleExpression: "rate(2 minutes)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaOS.Arn
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambdaOS:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaOS
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRuleLambdaOS.Arn

  LambdaEKS:
    Type: AWS::Lambda::Function
    Condition: ServiceEKS
    Properties:
      FunctionName: "cyngular-lambda-config-eks"
      Description: "Created by Cyngular Security | Configure EKS Logging"
      Role: !GetAtt LambdasRole.Arn
      Environment:
        Variables:
          CLIENT_REGIONS: !Join [" ", !Ref ClientRegions]
          FINAL_CRON: "cron(0 * * * ? *)"
          FIRST_RUN: "true"
          ROLE_ARN: !GetAtt ClientCyngularRole.Arn

      Runtime: "python3.12"
      Handler: lambda_function.cyngular_function
      Timeout: 900
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [VARS, Cyngular, LambdasBucketPrefix]
        S3Key: !Join ['', ['lambdas/', !Join ['.', ['ConfigEKS', 'zip']]]]
      Tags:
        - Key: Name
          Value: "cyngular-lambda-config-eks"
        - Key: Vendor
          Value: "Cyngular Security"

  ScheduledRuleLambdaEKS:
    Type: AWS::Events::Rule
    DependsOn: [StackSetManagerTrigger]
    Condition: ServiceEKS
    Properties:
      Name: !Sub "${LambdaEKS}-rule"
      Description: "Function did not run yet"
      ScheduleExpression: "rate(2 minutes)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaEKS.Arn
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambdaEKS: 
    Type: AWS::Lambda::Permission
    Condition: ServiceEKS
    Properties: 
      FunctionName: !Ref LambdaEKS
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRuleLambdaEKS.Arn

  LambdaDNS:
    Type: AWS::Lambda::Function
    Condition: ServiceDNS
    Properties:
      FunctionName: "cyngular-lambda-config-dns"
      Description: "Created by Cyngular Security. | Configure DNS"
      Role: !GetAtt LambdasRole.Arn
      Environment:
        Variables:
          CLIENT_REGIONS: !Join [" ", !Ref ClientRegions]
          FINAL_CRON: "cron(0 * * * ? *)"
          FIRST_RUN: "true"

      Runtime: "python3.12"
      Handler: lambda_function.cyngular_function
      Timeout: 900
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [VARS, Cyngular, LambdasBucketPrefix]
        S3Key: !Join ['', ['lambdas/', !Join ['.', ['ConfigDNS', 'zip']]]]
      Tags:
        - Key: Name
          Value: "cyngular-lambda-config-dns"
        - Key: Vendor
          Value: "Cyngular Security"

  ScheduledRuleLambdaDNS: 
    Type: AWS::Events::Rule
    DependsOn: [StackSetManagerTrigger]
    Condition: ServiceDNS
    Properties:
      Name: !Sub "${LambdaDNS}-rule"
      Description: "Function did not run yet"
      ScheduleExpression: "rate(2 minutes)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaDNS.Arn
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambdaDNS: 
    Type: AWS::Lambda::Permission
    Condition: ServiceDNS
    Properties: 
      FunctionName: !Ref LambdaDNS
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRuleLambdaDNS.Arn

  LambdaVFL:
    Type: AWS::Lambda::Function
    Condition: ServiceVFL
    Properties:
      FunctionName: "cyngular-lambda-config-vpcflowlogs"
      Description: "Created by Cyngular Security. | Configure VPC FLOW LOGS"
      Role: !GetAtt LambdasRole.Arn
      Environment:
        Variables:
          CLIENT_REGIONS: !Join [" ", !Ref ClientRegions]
          FINAL_CRON: "cron(0 * * * ? *)"
          FIRST_RUN: "true"
          CYNGULAR_BUCKET: !Ref CyngularS3Bucket

      Runtime: "python3.12"
      Handler: lambda_function.cyngular_function
      Timeout: 900
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [VARS, Cyngular, LambdasBucketPrefix]
        S3Key: !Join ['', ['lambdas/', !Join ['.', ['ConfigVFL', 'zip']]]]
      Tags:
        - Key: Name
          Value: "cyngular-lambda-config-vpcflowlogs"
        - Key: Vendor
          Value: "Cyngular Security"

  ScheduledRuleLambdaVFL:
    Type: AWS::Events::Rule
    DependsOn: [StackSetManagerTrigger]
    Condition: ServiceVFL
    Properties: 
      Name: !Sub "${LambdaVFL}-rule"
      Description: "Function did not run yet"
      ScheduleExpression: "rate(2 minutes)"
      State: "ENABLED"
      Targets: 
        - Arn: !GetAtt LambdaVFL.Arn
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambdaVFL: 
    Type: AWS::Lambda::Permission
    Condition: ServiceVFL
    Properties:
      FunctionName: !Ref LambdaVFL
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRuleLambdaVFL.Arn

  LambdaRemoveVFL:
    Type: AWS::Lambda::Function
    Condition: ServiceVFL
    Properties:
      FunctionName: "cyngular-lambda-remove-vpcflowlogs"
      Description: "Created by Cyngular Security. | Remove VPC FLOW LOGS"
      Role: !GetAtt LambdasRole.Arn

      Environment:
        Variables:
          CLIENT_REGIONS: !Join [" ", !Ref ClientRegions]

      Runtime: "python3.12"
      Handler: lambda_function.cyngular_function
      Timeout: 900
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [VARS, Cyngular, LambdasBucketPrefix]
        S3Key: !Join ['', ['lambdas/', !Join ['.', ['RemoveVFL', 'zip']]]]
      Tags:
        - Key: Name
          Value: "cyngular-lambda-remove-vpcflowlogs"
        - Key: Vendor
          Value: "Cyngular Security"

  LambdaRemoveDNS:
    Type: AWS::Lambda::Function
    Condition: ServiceDNS
    Properties:
      FunctionName: "cyngular-lambda-remove-dns"
      Description: "Created by Cyngular Security. | Remove DNS"
      Role: !GetAtt LambdasRole.Arn

      Environment:
        Variables:
          CLIENT_REGIONS: !Join [" ", !Ref ClientRegions]

      Runtime: "python3.12"
      Handler: lambda_function.cyngular_function
      Timeout: 900
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [VARS, Cyngular, LambdasBucketPrefix]
        S3Key: !Join ['', ['lambdas/', !Join ['.', ['RemoveDNS', 'zip']]]]
      Tags:
        - Key: Name
          Value: "cyngular-lambda-remove-dns"
        - Key: Vendor
          Value: "Cyngular Security"

  LambdaUpdateCyngularBucketPolicy:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "cyngular-lambda-update-cyngular-bucket-policy"
      Description: Created by Cyngular Security.
      Role: !GetAtt LambdasRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref CyngularS3Bucket

      Runtime: "python3.12"
      Handler: lambda_function.cyngular_function
      Timeout: 900
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [VARS, Cyngular, LambdasBucketPrefix]
        S3Key: !Join ['', ['lambdas/', !Join ['.', ['UpdateBucketPolicy', 'zip']]]]
      Tags:
        - Key: Name
          Value: "cyngular-lambda-update-cyngular-bucket-policy"
        - Key: Vendor
          Value: "Cyngular Security"

  AdminAndExecTrigger:
    Type: Custom::AdminAndExec
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaAdminAndExec.Arn
      ServiceTimeout: 1200

      ADMIN_TEMPLATE_URL: !Sub
        - "https://${bucket_name}.s3.amazonaws.com/stacks/AWSCloudFormationStackSetAdministrationRole.yaml"
        - bucket_name: !FindInMap [VARS, Cyngular, TemplateBucket]

      EXEC_TEMPLATE_URL: !Sub
        - "https://${bucket_name}.s3.amazonaws.com/stacks/AWSCloudFormationStackSetExecutionRole.yaml"
        - bucket_name: !FindInMap [VARS, Cyngular, TemplateBucket]

  LambdaAdminAndExec:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "cyngular-lambda-admin-and-execution-roles"
      Description: Created by Cyngular Security.

      Role: !GetAtt LambdaAdminAndExecRole.Arn
      Runtime: "python3.12"
      Handler: lambda_function.cyngular_function
      Timeout: 900
      Environment:
        Variables:
          CLIENT_REGIONS: !Join [",", !Ref ClientRegions]

      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [VARS, Cyngular, LambdasBucketPrefix]
        S3Key: !Join ['', ['lambdas/', !Join ['.', ['AdminAndExec', 'zip']]]]

      Tags:
        - Key: Name
          Value: "cyngular-lambda-admin-and-execution-roles"
        - Key: Vendor
          Value: "Cyngular Security"

  StackSetManagerTrigger:
    DependsOn: [AdminAndExecTrigger]
    Type: Custom::StackSetManager
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaStackSetManager.Arn
      ServiceTimeout: 1200
      Stack2URL: !Sub
        - "https://${bucket_name}.s3.amazonaws.com/stacks/stack2.yaml"
        - bucket_name: !FindInMap [VARS, Cyngular, TemplateBucket]

      StackSet1URL: !Sub
        - "https://${bucket_name}.s3.amazonaws.com/stacks/stackset_child1.yaml"
        - bucket_name: !FindInMap [VARS, Cyngular, TemplateBucket]

      StackSet2URL: !Sub
        - "https://${bucket_name}.s3.amazonaws.com/stacks/stackset_child2.yaml"
        - bucket_name: !FindInMap [VARS, Cyngular, TemplateBucket]

  LambdaStackSetManager:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "cyngular-lambda-stackset-manager"
      Description: Created by Cyngular Security.
      Role: !GetAtt ManagerLambdaRole.Arn

      Runtime: "python3.12"
      Handler: lambda_function.cyngular_function
      Timeout: 900
      Environment:
        Variables:
          ClientName: !Ref ClientName
          ClientRegions: !Join [",", !Ref ClientRegions]

          UpdateBucketPolicyLambdaName: !Ref LambdaUpdateCyngularBucketPolicy

          CyngularAccountId: !Ref CyngularAccountId
          S3BucketArn: !GetAtt CyngularS3Bucket.Arn
          IsOrg: !If [IsOrg, true, false]

          EnableDNS: !Ref EnableDNS
          EnableEKS: !Ref EnableEKS
          EnableVPCFlowLogs: !Ref EnableVPCFlowLogs
      Code:
        S3Bucket: !Sub
          - "${bucket_name}-${AWS::Region}"
          - bucket_name: !FindInMap [VARS, Cyngular, LambdasBucketPrefix]
        S3Key: !Join ['', ['lambdas/', !Join ['.', ['StackSetManager', 'zip']]]]
      Tags:
        - Key: Name
          Value: "cyngular-lambda-stackset-manager"
        - Key: Vendor
          Value: "Cyngular Security"