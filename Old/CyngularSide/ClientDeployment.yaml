Description: Cyngular's new client deployment
Parameters:
  ClientName:
    Description: An environment name that is prefixed to resource names
    Type: String
  BucketName:
    Description: The name of the bucket in which the lambda source files are located
    Type: String
  CyngularAccountId:
    Description: The account id of the cyngular account
    Type: String
  LinuxServiceAmi:
    Description: The ami of the ec2 instance of the linux service
    Type: String
  LinuxSecurityGroup:
    Description: linux service security group id
    Type: AWS::EC2::SecurityGroup::Id
  PrivateSubnet1:
    Description: the id of the private subnet 1
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2:
    Description: the id of the private subnet 2
    Type: AWS::EC2::Subnet::Id
  Vpc:
    Description: the id of the region vpc
    Type: AWS::EC2::VPC::Id
  SqsRdsSecurityGroup:
    Description: The id of the security group for the sqs rds lambda
    Type: AWS::EC2::SecurityGroup::Id
  RegionName:
    Description: underscore seperated region name (example- us_east_1)
    Type: String

Resources:
  #------------------SecretManager-------------------
  SecretManager:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Join ["-", ["secret_manager", !Ref "ClientName"]]
      Description: Secret for Client
      GenerateSecretString: { SecretStringTemplate: !Sub '{
            "AWS_CLIENT_ACCOUNT_ID": "",
            "AWS_IS_ORGANIZATION":"",
            "AWS_CLIENT_NAME": "${ClientName}",
            "AWS_DB_PORT":"8899",
            "AWS_RDS_ENDPOINT": "",
            "AWS_RDS_PORT":"5432",
            "AWS_RDS_DBNAME": "db_cyngular_prod_${RegionName}",
            "AWS_RDS_USER":"postgres",
            "AWS_RDS_PASSWORD":"",
            "AWS_CYNGULAR_READONLY_ROLE":"cyngular-readonly-role-${ClientName}",
            "AWS_SNAPSHOT_KMS_KEY_ID":"cyngular-kms-key",
            "AWS_LINUX_VOLUME_AVAILABILITY_ZONE":"${AWS::Region}a",
            "N_DAYS_AGO":"1",
            "AWS_LINUX_SERVICE_SQS_MAX_RECEIVE_ITEMS":"10",
            "AWS_LINUX_SERVICE_DYNAMODB":"linux_service_dynamodb_${ClientName}",
            "AUTH0_CLIENT_UID":"",
            "AWS_CLIENT_BUCKET_NAMES":"",
            "AWS_CLOUDTRAIL_BUCKET_NAME":"",
            "AWS_CLOUDTRAIL_BUCKET_ACCOUNT_ID":"",
            "AWS_CLOUDTRAIL_BUCKET_REGION":"",
            "AWS_CLOUDTRAIL_BUCKET_PREFIX":"/",
            "AWS_DNSLOGS_BUCKET_ACCOUNT_ID":"",
            "AWS_DNSLOGS_BUCKET_NAME":"",
            "AWS_DNSLOGS_BUCKET_REGION":"",
            "AWS_DNSLOGS_BUCKET_PREFIX":"/",
            "AWS_VPCFLOWLOGS_BUCKET_ACCOUNT_ID":"",
            "AWS_VPCFLOWLOGS_BUCKET_NAME":"",
            "AWS_VPCFLOWLOGS_BUCKET_REGION":"",
            "AWS_VPCFLOWLOGS_BUCKET_PREFIX":"/",
            "AWS_LINUX_SERVICE_SQS_QUEUE_URL":"https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/aws-sqs-linux-service-${ClientName}",
            "AWS_CLOUD_SERVICE_SQS_QUEUE_URL":"https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/aws-sqs-cloud-service-${ClientName}",
            "AWS_EKSLOGS_SERVICE_SQS_QUEUE_URL":"https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/aws-sqs-ekslogs-service-${ClientName}",
            "AWS_RDS_SQS_QUEUE_URL":"https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/aws-sqs-rds-service-${ClientName}"
            }', PasswordLength: 30, GenerateStringKey: "cloudformationtest" }

      Tags:
        - Key: Name
          Value: !Join ["-", ["secret_manager", !Ref "ClientName"]]
        - Key: Client
          Value: !Ref ClientName

  #---------------------SQS-----------------------
  CyngularCloudServiceSqs:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      QueueName:
        !Join ["-", ["aws", "sqs", "cloud", "service", !Ref "ClientName"]]
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - Key: Name
          Value:
            !Join ["-", ["aws", "sqs", "cloud", "service", !Ref "ClientName"]]
        - Key: Client
          Value: !Ref ClientName
      VisibilityTimeout: 900

  CyngularCloudServiceSQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref CyngularCloudServiceSqs
      PolicyDocument:
        Statement:
          - Action:
              - "SQS:*"
            Effect: "Allow"
            Resource: "*"
            Principal:
              AWS:
                - "*"

  CyngularEksServiceSqs:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      QueueName:
        !Join ["-", ["aws", "sqs", "ekslogs", "service", !Ref "ClientName"]]
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - Key: Name
          Value:
            !Join ["-", ["aws", "sqs", "ekslogs", "service", !Ref "ClientName"]]
        - Key: Client
          Value: !Ref ClientName
      VisibilityTimeout: 900

  CyngularEksServiceSQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref CyngularEksServiceSqs
      PolicyDocument:
        Statement:
          - Action:
              - "SQS:*"
            Effect: "Allow"
            Resource: "*"
            Principal:
              AWS:
                - "*"

  CyngularLinuxServiceSqs:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      QueueName:
        !Join ["-", ["aws", "sqs", "linux", "service", !Ref "ClientName"]]
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - Key: Name
          Value:
            !Join ["-", ["aws", "sqs", "linux", "service", !Ref "ClientName"]]
        - Key: Client
          Value: !Ref ClientName
      VisibilityTimeout: 900

  CyngularRdsServiceSqs:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      QueueName:
        !Join ["-", ["aws", "sqs", "rds", "service", !Ref "ClientName"]]
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - Key: Name
          Value:
            !Join ["-", ["aws", "sqs", "rds", "service", !Ref "ClientName"]]
        - Key: Client
          Value: !Ref ClientName
      VisibilityTimeout: 900

  CyngularRdsServiceSQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref CyngularRdsServiceSqs
      PolicyDocument:
        Statement:
          - Action:
              - "SQS:*"
            Effect: "Allow"
            Resource: "*"
            Principal:
              AWS:
                - "*"

  #---------------------DynamoDB-----------------------
  CyngularLinuxDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableClass: STANDARD
      TableName: !Join ["_", ["linux", "service", "dynamodb", !Ref ClientName]]
      Tags:
        - Key: Name
          Value: !Join ["_", ["linux", "service", "dynamodb", !Ref ClientName]]
        - Key: Client
          Value: !Ref ClientName

    #---------------------Instance role-----------------------

  LinuxServiceRole:
    Type: AWS::IAM::Role
    DependsOn:
      [
        CyngularLinuxDynamoDB,
        CyngularRdsServiceSqs,
        CyngularLinuxServiceSqs,
        CyngularEksServiceSqs,
        CyngularCloudServiceSqs,
        SecretManager,
      ]
    Properties:
      RoleName: !Join ["-", ["cyngular", "role", !Ref "ClientName", !Ref AWS::Region]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - "ec2.amazonaws.com"
      Tags:
        - Key: Name
          Value: !Join ["-", ["cyngular", "role", !Ref "ClientName"]]
        - Key: Client
          Value: !Ref ClientName

  LinuxServicePolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn: LinuxServiceRole
    Properties:
      ManagedPolicyName:
        !Join ["-", ["cyngular", "role", "policy", !Ref "ClientName", !Ref AWS::Region]]
      Roles:
        - !Ref LinuxServiceRole
      PolicyDocument: { "Version": "2012-10-17", "Statement": [
              {
                "Sid": "VisualEditor0",
                "Effect": "Allow",
                "Action":
                  [
                    "ec2:DetachVolume",
                    "ec2:AttachVolume",
                    "ec2:CopySnapshot",
                    "kms:Decrypt",
                    "iam:List*",
                    "ec2:DeleteSnapshot",
                    "ec2:List*",
                    "lambda:ListFunctions",
                    "kms:Describe*",
                    "ec2:CreateVolume*",
                    "kms:ReEncrypt*",
                    "kms:GenerateDataKey*",
                    "ec2:CreateTag*",
                    "ec2:DeleteVolume",
                    "iam:Get*",
                    "ec2:Describe*",
                    "kms:Encrypt",
                    "eks:Describe*",
                    "eks:List*",
                    "kms:CreateGrant",
                    "ce:GetCostAndUsage",
                    "ce:GetDimensionValues",
                    "iam:PassRole",
                  ],
                "Resource": "*",
              },
              {
                "Sid": "VisualEditor5",
                "Effect": "Allow",
                "Action": ["ec2:TerminateInstances"],
                "Resource": "*",
                "Condition":
                  {
                    "StringEquals":
                      { "aws:ResourceTag/Client": !Ref ClientName },
                  },
              },
              {
                "Sid": "VisualEditor1",
                "Effect": "Allow",
                "Action": ["secretsmanager:GetSecretValue"],
                "Resource": [!Ref SecretManager],
              },
              {
                "Sid": "VisualEditor2",
                "Effect": "Allow",
                "Action": "sqs:*",
                "Resource": "*",
                "Condition":
                  {
                    "StringEquals":
                      { "aws:ResourceTag/TagKey/Client": !Ref ClientName },
                  },
              },
              {
                "Sid": "VisualEditor3",
                "Effect": "Allow",
                "Action": "sqs:*",
                "Resource":
                  [
                    !GetAtt CyngularCloudServiceSqs.Arn,
                    !GetAtt CyngularEksServiceSqs.Arn,
                    !GetAtt CyngularLinuxServiceSqs.Arn,
                    !GetAtt CyngularRdsServiceSqs.Arn,
                  ],
              },
              # "*"
              {
                "Sid": "VisualEditor4",
                "Effect": "Allow",
                "Action": "dynamodb:*",
                "Resource": [!GetAtt CyngularLinuxDynamoDB.Arn],
              },
              {
                "Sid": "AllowPassRole",
                "Effect": "Allow",
                "Action": ["iam:PassRole"],
                "Resource":
                  [
                    !Join [
                      "",
                      [
                        "arn:aws:iam::",
                        !Join [
                          "",
                          [
                            !Ref CyngularAccountId,
                            !Join [
                              "",
                              [
                                ":instance-profile/",
                                !Join [
                                  "-",
                                  ["cyngular", "role", !Ref "ClientName"],
                                ],
                              ],
                            ],
                          ],
                        ],
                      ],
                    ],
                  ],
              },
            ] }

  LinuxInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles: [!Ref LinuxServiceRole]

    #---------------------DB Instance-----------------------

  # DatabaseKeyPair:
  #   Type: "AWS::EC2::KeyPair"
  #   Properties:
  #     KeyName: !Join ["-", ["aws", "db", "service", "key", !Ref "ClientName"]]
  #     Tags:
  #       - Key: Name
  #         Value: !Join ["-", ["aws", "db", "service", "key", !Ref "ClientName"]]
  #       - Key: Client
  #         Value: !Ref ClientName

  # DBMachine:
  #   Type: AWS::EC2::Instance
  #   DependsOn: [DatabaseKeyPair, LinuxServiceRole]
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet1
  #     KeyName: !Ref DatabaseKeyPair
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/sda1
  #         Ebs:
  #           VolumeSize: 30
  #           VolumeType: gp2
  #     SecurityGroupIds:
  #       - !Ref LinuxSecurityGroup
  #     ImageId: !Ref DBServiceAmi
  #     InstanceType: t2.micro
  #     IamInstanceProfile: !Ref LinuxInstanceProfile
  #     PrivateDnsNameOptions:
  #       EnableResourceNameDnsARecord: true
  #       HostnameType: ip-name
  #     Tags:
  #       - Key: Name
  #         Value:
  #           !Join ["-", ["aws", "db", "service", "instance", !Ref "ClientName"]]
  #       - Key: Client
  #         Value: !Ref ClientName
  #       - Key: Secret
  #         Value: !Join ["-", ["secret_manager", !Ref "ClientName"]]

  #---------------------Cyngular Lambda Role-----------------------
  CyngularLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      [
        CyngularLinuxDynamoDB,
        CyngularRdsServiceSqs,
        CyngularLinuxServiceSqs,
        CyngularEksServiceSqs,
        CyngularCloudServiceSqs,
        SecretManager,
      ]
    Properties:
      RoleName: !Join ["-", ["cyngular", "lambda", "role", !Ref "ClientName", !Ref AWS::Region]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: !Join ["-", ["cyngular", "lambda", "role", !Ref "ClientName"]]
        - Key: Client
          Value: !Ref ClientName

  CyngularLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn: CyngularLambdaRole
    Properties:
      ManagedPolicyName:
        !Join ["-", ["cyngular", "lambda", "role", "policy", !Ref "ClientName", !Ref AWS::Region]]
      Roles:
        - !Ref CyngularLambdaRole
      PolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement":
            [
              {
                "Sid": "VisualEditor0",
                "Effect": "Allow",
                "Action":
                  [
                    "iam:List*",
                    "iam:Get*",
                    "kms:Decrypt",
                    "kms:Encrypt",
                    "kms:Describe*",
                    "kms:ReEncrypt*",
                    "kms:GenerateDataKey*",
                    "kms:CreateGrant",
                    "ec2:DescribeTags",
                    "ec2:DetachVolume",
                    "ec2:AttachVolume",
                    "ec2:CopySnapshot",
                    "ec2:DeleteSnapshot",
                    "ec2:CreateVolume",
                    "ec2:DeleteVolume",
                    "ec2:CreateTag*",
                    "ec2:List*",
                    "ec2:Describe*",
                    "logs:*",
                    "lambda:InvokeFunction",
                    "lambda:InvokeAsync",
                    "lambda:ListFunctions",
                    "ec2:RunInstances",
                    "iam:AddRoleToInstanceProfile",
                    "ec2:ModifySnapshotAttribute",
                    "ec2:CreateSnapshot",
                  ],
                "Resource": "*",
              },
              {
                "Sid": "VisualEditor1",
                "Effect": "Allow",
                "Action": ["secretsmanager:GetSecretValue"],
                "Resource": [!Ref SecretManager],
              },
              {
                "Sid": "VisualEditor2",
                "Effect": "Allow",
                "Action": ["dynamodb:*"],
                "Resource": [!GetAtt CyngularLinuxDynamoDB.Arn],
              },
              {
                "Sid": "VisualEditor3s",
                "Effect": "Allow",
                "Action": ["sqs:*"],
                "Resource":
                  [
                    !GetAtt CyngularCloudServiceSqs.Arn,
                    !GetAtt CyngularEksServiceSqs.Arn,
                    !GetAtt CyngularLinuxServiceSqs.Arn,
                    !GetAtt CyngularRdsServiceSqs.Arn,
                  ],
              },
              {
                "Sid": "VisualEditor4",
                "Effect": "Allow",
                "Action": "sts:AssumeRole",
                "Resource":
                  [
                    !Join [
                      "",
                      [
                        "arn:aws:iam::*:role/cyngular-readonly-role-",
                        !Ref ClientName,
                      ],
                    ],
                  ],
              },
              {
                "Effect": "Allow",
                "Action": "iam:PassRole",
                "Resource": !GetAtt LinuxServiceRole.Arn,
                "Condition":
                  {
                    "StringEquals":
                      { "iam:PassedToService": ["ec2.amazonaws.com"] },
                  },
              },
            ],
        }

  #---------------------Cyngular Lambda-----------------------
  CyngularCloudServiceBLambdaFunction:
    DependsOn: CyngularLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [CloudService_Lambda_B, !Ref ClientName]]
      Description: Created by Cyngular Security.
      Code:
        S3Bucket: !Ref BucketName
        S3Key:
          !Join ["", ["lambda/", !Join [".", ["CloudService_Lambda_B", "zip"]]]]
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CyngularLambdaRole.Arn
      Runtime: python3.8
      Timeout: 900
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          AWS_SECRET_NAME: !Join ["-", ["secret_manager", !Ref "ClientName"]]

  CyngularCloudServiceALambdaFunction:
    DependsOn: CyngularLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [CloudService_Lambda_A, !Ref ClientName]]
      Description: Created by Cyngular Security.
      Code:
        S3Bucket: !Ref BucketName
        S3Key:
          !Join ["", ["lambda/", !Join [".", ["CloudService_Lambda_A", "zip"]]]]
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CyngularLambdaRole.Arn
      Runtime: python3.8
      Timeout: 900
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          AWS_SECRET_NAME: !Join ["-", ["secret_manager", !Ref "ClientName"]]
          LAMBDA_PREFIX_NUM_CAPACITY: 1
          SECOND_LAMBDA_ARN: !GetAtt CyngularCloudServiceBLambdaFunction.Arn
          CLIENT_NAME: !Ref ClientName
  CloudScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "CloudScheduledRule"
      ScheduleExpression: "cron(0 * * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt CyngularCloudServiceALambdaFunction.Arn
          Id: "TargetFunctionV1"
  CloudPermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CyngularCloudServiceALambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CloudScheduledRule.Arn

  CyngularCloudServiceCLambdaFunction:
    DependsOn: CyngularLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [CloudService_Lambda_C, !Ref ClientName]]
      Description: Created by Cyngular Security.
      Code:
        S3Bucket: !Ref BucketName
        S3Key:
          !Join ["", ["lambda/", !Join [".", ["CloudService_Lambda_C", "zip"]]]]
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CyngularLambdaRole.Arn
      Runtime: python3.8
      Timeout: 900
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          AWS_SECRET_NAME: !Join ["-", ["secret_manager", !Ref "ClientName"]]
          MAX_MSG_BULK_SIZE: 100

  CyngularCloudLambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 50
      MaximumBatchingWindowInSeconds: 60
      Enabled: true
      EventSourceArn: !GetAtt CyngularCloudServiceSqs.Arn
      FunctionName: !GetAtt CyngularCloudServiceCLambdaFunction.Arn

  CyngularEksServiceBLambdaFunction:
    DependsOn: CyngularLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        !Join ["-", [CloudService_EKSLogs_Lambda_B, !Ref ClientName]]
      Description: Created by Cyngular Security.
      Code:
        S3Bucket: !Ref BucketName
        S3Key:
          !Join [
            "",
            ["lambda/", !Join [".", ["CloudService_EKSLogs_Lambda_B", "zip"]]],
          ]
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CyngularLambdaRole.Arn
      Runtime: python3.8
      Timeout: 600
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          AWS_SECRET_NAME: !Join ["-", ["secret_manager", !Ref "ClientName"]]

  CyngularEksServiceALambdaFunction:
    DependsOn: CyngularLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        !Join ["-", [CloudService_EKSLogs_Lambda_A, !Ref ClientName]]
      Description: Created by Cyngular Security.
      Code:
        S3Bucket: !Ref BucketName
        S3Key:
          !Join [
            "",
            ["lambda/", !Join [".", ["CloudService_EKSLogs_Lambda_A", "zip"]]],
          ]
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CyngularLambdaRole.Arn
      Runtime: python3.8
      Timeout: 600
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          AWS_SECRET_NAME: !Join ["-", ["secret_manager", !Ref "ClientName"]]
          LAMBDA_LOG_STREAM_NUM_CAPACITY: 30
          SECOND_LAMBDA_ARN: !GetAtt CyngularEksServiceBLambdaFunction.Arn
          CLIENT_NAME: !Ref ClientName
  EksScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EksScheduledRule"
      ScheduleExpression: "cron(0 * * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt CyngularEksServiceALambdaFunction.Arn
          Id: "TargetFunctionV1"
  EksPermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CyngularEksServiceALambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EksScheduledRule.Arn

  CyngularEksServiceCLambdaFunction:
    DependsOn: CyngularLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        !Join ["-", [CloudService_EKSLogs_Lambda_C, !Ref ClientName]]
      Description: Created by Cyngular Security.
      Code:
        S3Bucket: !Ref BucketName
        S3Key:
          !Join [
            "",
            ["lambda/", !Join [".", ["CloudService_EKSLogs_Lambda_C", "zip"]]],
          ]
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CyngularLambdaRole.Arn
      Runtime: python3.8
      Timeout: 900
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          AWS_SECRET_NAME: !Join ["-", ["secret_manager", !Ref "ClientName"]]

  CyngularEksLambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping

    Properties:
      BatchSize: 50
      MaximumBatchingWindowInSeconds: 60
      Enabled: true
      EventSourceArn: !GetAtt CyngularEksServiceSqs.Arn
      FunctionName: !GetAtt CyngularEksServiceCLambdaFunction.Arn

  CyngularLinuxServiceBLambdaFunction:
    DependsOn: CyngularLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [LinuxService_Lambda_B, !Ref ClientName]]
      Description: Created by Cyngular Security.
      Code:
        S3Bucket: !Ref BucketName
        S3Key:
          !Join ["", ["lambda/", !Join [".", ["LinuxService_Lambda_B", "zip"]]]]
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CyngularLambdaRole.Arn
      Runtime: python3.8
      Timeout: 600
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          AWS_SECRET_NAME: !Join ["-", ["secret_manager", !Ref "ClientName"]]

  CyngularLinuxServiceALambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: [CyngularLambdaPolicy, CyngularLinuxServiceBLambdaFunction]
    Properties:
      FunctionName: !Join ["-", [LinuxService_Lambda_A, !Ref ClientName]]
      Description: Created by Cyngular Security.
      Code:
        S3Bucket: !Ref BucketName
        S3Key:
          !Join ["", ["lambda/", !Join [".", ["LinuxService_Lambda_A", "zip"]]]]
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CyngularLambdaRole.Arn
      Runtime: python3.8
      Timeout: 600
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          AWS_SECRET_NAME: !Join ["-", ["secret_manager", !Ref "ClientName"]]
          image_id: !Ref LinuxServiceAmi
          instances_per_server: 2
          lambda_arn: !GetAtt CyngularLinuxServiceBLambdaFunction.Arn
          max_snapshots_per_iteration: 400
          role_arn: !GetAtt LinuxInstanceProfile.Arn
          role_name: !Join ["-", ["cyngular", "role", !Ref "ClientName"]]
          security_group_id: !Ref LinuxSecurityGroup
          subnet_id: !Ref PrivateSubnet1
          vpc_id: !Ref Vpc
          CLIENT_NAME: !Ref ClientName
  LinuxScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "LinuxScheduledRule"
      ScheduleExpression: "cron(0 0 * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt CyngularLinuxServiceALambdaFunction.Arn
          Id: "TargetFunctionV1"
  LinuxPermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CyngularLinuxServiceALambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt LinuxScheduledRule.Arn

  CyngularVisibilityServiceBLambdaFunction:
    DependsOn: CyngularLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [VisibilityService_Lambda_B, !Ref ClientName]]
      Description: Created by Cyngular Security.
      Code:
        S3Bucket: !Ref BucketName
        S3Key:
          !Join [
            "",
            ["lambda/", !Join [".", ["VisibilityService_Lambda_B", "zip"]]],
          ]
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CyngularLambdaRole.Arn
      Runtime: python3.8
      Timeout: 300
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          AWS_SECRET_NAME: !Join ["-", ["secret_manager", !Ref "ClientName"]]

  CyngularVisibilityServiceALambdaFunction:
    DependsOn: CyngularLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [VisibilityService_Lambda_A, !Ref ClientName]]
      Description: Created by Cyngular Security.
      Code:
        S3Bucket: !Ref BucketName
        S3Key:
          !Join [
            "",
            ["lambda/", !Join [".", ["VisibilityService_Lambda_A", "zip"]]],
          ]
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CyngularLambdaRole.Arn
      Runtime: python3.8
      Timeout: 300
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          AWS_SECRET_NAME: !Join ["-", ["secret_manager", !Ref "ClientName"]]
          LAMBDA_PREFIX_NUM_CAPACITY: 1
          SECOND_LAMBDA_ARN: !GetAtt CyngularVisibilityServiceBLambdaFunction.Arn
          CLIENT_NAME: !Ref ClientName

  VisibilityScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "VisibilityScheduledRule"
      ScheduleExpression: "cron(0 */6 * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt CyngularVisibilityServiceALambdaFunction.Arn
          Id: "TargetFunctionV1"
  VisibilityPermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CyngularVisibilityServiceALambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt VisibilityScheduledRule.Arn

  CyngularDatabaseInitServiceLambdaFunction:
    DependsOn: CyngularLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [DatabaseService_Lambda_Init, !Ref ClientName]]
      Description: Created by Cyngular Security.
      Code:
        S3Bucket: !Ref BucketName
        S3Key:
          !Join [
            "",
            ["lambda/", !Join [".", ["DatabaseService_Lambda_Init", "zip"]]],
          ]
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CyngularLambdaRole.Arn
      Runtime: python3.8
      Timeout: 900
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          AWS_SECRET_NAME: !Join ["-", ["secret_manager", !Ref "ClientName"]]
      VpcConfig:
        SecurityGroupIds:
          - !Ref SqsRdsSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  CyngularDatabaseServiceLambdaFunction:
    DependsOn: CyngularLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [DatabaseService_Lambda, !Ref ClientName]]
      Description: Created by Cyngular Security.
      Code:
        S3Bucket: !Ref BucketName
        S3Key:
          !Join [
            "",
            ["lambda/", !Join [".", ["DatabaseService_Lambda", "zip"]]],
          ]
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CyngularLambdaRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          AWS_SECRET_NAME: !Join ["-", ["secret_manager", !Ref "ClientName"]]
      VpcConfig:
        SecurityGroupIds:
          - !Ref SqsRdsSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  CyngularDatabaseLambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1000
      MaximumBatchingWindowInSeconds: 60
      Enabled: true
      EventSourceArn: !GetAtt CyngularRdsServiceSqs.Arn
      FunctionName: !GetAtt CyngularDatabaseServiceLambdaFunction.Arn

  # DatabaseScheduledRule:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     Description: "DatabaseScheduledRule"
  #     ScheduleExpression: "cron(*/10 * * * ? *)"
  #     State: "ENABLED"
  #     Targets:
  #       - Arn: !GetAtt CyngularDatabaseServiceLambdaFunction.Arn
  #         Id: "TargetFunctionV1"
  # DatabasePermissionForEventsToInvokeLambda:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !GetAtt CyngularDatabaseServiceLambdaFunction.Arn
  #     Action: "lambda:InvokeFunction"
  #     Principal: "events.amazonaws.com"
  #     SourceArn: !GetAtt DatabaseScheduledRule.Arn

  CyngularLogicServiceBLambdaFunction:
    DependsOn: CyngularLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [LogicService_Lambda_B, !Ref ClientName]]
      Description: Created by Cyngular Security.
      Code:
        S3Bucket: !Ref BucketName
        S3Key:
          !Join ["", ["lambda/", !Join [".", ["LogicService_Lambda_B", "zip"]]]]
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CyngularLambdaRole.Arn
      Runtime: python3.8
      Timeout: 300
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          AWS_SECRET_NAME: !Join ["-", ["secret_manager", !Ref "ClientName"]]
      VpcConfig:
        SecurityGroupIds:
          - !Ref SqsRdsSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  CyngularLogicServiceALambdaFunction:
    DependsOn: CyngularLambdaPolicy
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [LogicService_Lambda_A, !Ref ClientName]]
      Description: Created by Cyngular Security.
      Code:
        S3Bucket: !Ref BucketName
        S3Key:
          !Join ["", ["lambda/", !Join [".", ["LogicService_Lambda_A", "zip"]]]]
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CyngularLambdaRole.Arn
      Runtime: python3.8
      Timeout: 300
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          AWS_SECRET_NAME: !Join ["-", ["secret_manager", !Ref "ClientName"]]
          LAMBDA_B_CAPACITY: 1
          SECOND_LAMBDA_ARN: !GetAtt CyngularLogicServiceBLambdaFunction.Arn
          CLIENT_NAME: !Ref ClientName

  LogicScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "LogicScheduledRule"
      ScheduleExpression: "cron(*/30 * * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt CyngularLogicServiceALambdaFunction.Arn
          Id: "TargetFunctionV1"
  LogicPermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CyngularLogicServiceALambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt LogicScheduledRule.Arn
